/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: MFTAgentStubs.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./azure/AzureStorage";
import * as dependency_2 from "./box/BoxStorage";
import * as dependency_3 from "./dropbox/DropboxStorage";
import * as dependency_4 from "./ftp/FTPStorage";
import * as dependency_5 from "./gcs/GCSStorage";
import * as dependency_6 from "./local/LocalStorage";
import * as dependency_7 from "./odata/ODataStorage";
import * as dependency_8 from "./s3/S3Storage";
import * as dependency_9 from "./scp/SCPStorage";
import * as dependency_10 from "./swift/SwiftStorage";
import * as dependency_11 from "./http/HTTPStorage";
import * as dependency_12 from "./azure/AzureCredential";
import * as dependency_13 from "./box/BoxCredential";
import * as dependency_14 from "./dropbox/DropboxCredential";
import * as dependency_15 from "./ftp/FTPCredential";
import * as dependency_16 from "./gcs/GCSCredential";
import * as dependency_17 from "./odata/ODataCredential";
import * as dependency_18 from "./s3/S3Credential";
import * as dependency_19 from "./scp/SCPCredential";
import * as dependency_20 from "./swift/SwiftCredential";
import * as dependency_21 from "./http/HttpCredential";
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.agent.stub {
    export enum MetadataFetchError {
        NOT_FOUND = 0,
        NO_PERMISSION = 1
    }
    export class StorageWrapper extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]];
        constructor(data?: any[] | ({} & (({
            azure?: dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            local?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("azure" in data && data.azure != undefined) {
                    this.azure = data.azure;
                }
                if ("box" in data && data.box != undefined) {
                    this.box = data.box;
                }
                if ("dropbox" in data && data.dropbox != undefined) {
                    this.dropbox = data.dropbox;
                }
                if ("ftp" in data && data.ftp != undefined) {
                    this.ftp = data.ftp;
                }
                if ("gcs" in data && data.gcs != undefined) {
                    this.gcs = data.gcs;
                }
                if ("local" in data && data.local != undefined) {
                    this.local = data.local;
                }
                if ("odata" in data && data.odata != undefined) {
                    this.odata = data.odata;
                }
                if ("s3" in data && data.s3 != undefined) {
                    this.s3 = data.s3;
                }
                if ("scp" in data && data.scp != undefined) {
                    this.scp = data.scp;
                }
                if ("swift" in data && data.swift != undefined) {
                    this.swift = data.swift;
                }
                if ("http" in data && data.http != undefined) {
                    this.http = data.http;
                }
            }
        }
        get azure() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage, 1) as dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage;
        }
        set azure(value: dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_azure() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get box() {
            return pb_1.Message.getWrapperField(this, dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage, 2) as dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage;
        }
        set box(value: dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_box() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dropbox() {
            return pb_1.Message.getWrapperField(this, dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage, 3) as dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage;
        }
        set dropbox(value: dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dropbox() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ftp() {
            return pb_1.Message.getWrapperField(this, dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage, 4) as dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage;
        }
        set ftp(value: dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_ftp() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get gcs() {
            return pb_1.Message.getWrapperField(this, dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage, 5) as dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage;
        }
        set gcs(value: dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_gcs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get local() {
            return pb_1.Message.getWrapperField(this, dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage, 6) as dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage;
        }
        set local(value: dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_local() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get odata() {
            return pb_1.Message.getWrapperField(this, dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage, 7) as dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage;
        }
        set odata(value: dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_odata() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get s3() {
            return pb_1.Message.getWrapperField(this, dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage, 8) as dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage;
        }
        set s3(value: dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_s3() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get scp() {
            return pb_1.Message.getWrapperField(this, dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage, 9) as dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage;
        }
        set scp(value: dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_scp() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get swift() {
            return pb_1.Message.getWrapperField(this, dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage, 10) as dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage;
        }
        set swift(value: dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_swift() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get http() {
            return pb_1.Message.getWrapperField(this, dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage, 11) as dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage;
        }
        set http(value: dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage) {
            pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
        }
        get has_http() {
            return pb_1.Message.getField(this, 11) != null;
        }
        get storage() {
            const cases: {
                [index: number]: "none" | "azure" | "box" | "dropbox" | "ftp" | "gcs" | "local" | "odata" | "s3" | "scp" | "swift" | "http";
            } = {
                0: "none",
                1: "azure",
                2: "box",
                3: "dropbox",
                4: "ftp",
                5: "gcs",
                6: "local",
                7: "odata",
                8: "s3",
                9: "scp",
                10: "swift",
                11: "http"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])];
        }
        static fromObject(data: {
            azure?: ReturnType<typeof dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage.prototype.toObject>;
            box?: ReturnType<typeof dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage.prototype.toObject>;
            dropbox?: ReturnType<typeof dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage.prototype.toObject>;
            ftp?: ReturnType<typeof dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage.prototype.toObject>;
            gcs?: ReturnType<typeof dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.prototype.toObject>;
            local?: ReturnType<typeof dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage.prototype.toObject>;
            odata?: ReturnType<typeof dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage.prototype.toObject>;
            s3?: ReturnType<typeof dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.toObject>;
            scp?: ReturnType<typeof dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.toObject>;
            swift?: ReturnType<typeof dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage.prototype.toObject>;
            http?: ReturnType<typeof dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.prototype.toObject>;
        }): StorageWrapper {
            const message = new StorageWrapper({});
            if (data.azure != null) {
                message.azure = dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage.fromObject(data.azure);
            }
            if (data.box != null) {
                message.box = dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage.fromObject(data.box);
            }
            if (data.dropbox != null) {
                message.dropbox = dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage.fromObject(data.dropbox);
            }
            if (data.ftp != null) {
                message.ftp = dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage.fromObject(data.ftp);
            }
            if (data.gcs != null) {
                message.gcs = dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.fromObject(data.gcs);
            }
            if (data.local != null) {
                message.local = dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage.fromObject(data.local);
            }
            if (data.odata != null) {
                message.odata = dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage.fromObject(data.odata);
            }
            if (data.s3 != null) {
                message.s3 = dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.fromObject(data.s3);
            }
            if (data.scp != null) {
                message.scp = dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.fromObject(data.scp);
            }
            if (data.swift != null) {
                message.swift = dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage.fromObject(data.swift);
            }
            if (data.http != null) {
                message.http = dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.fromObject(data.http);
            }
            return message;
        }
        toObject() {
            const data: {
                azure?: ReturnType<typeof dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage.prototype.toObject>;
                box?: ReturnType<typeof dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage.prototype.toObject>;
                dropbox?: ReturnType<typeof dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage.prototype.toObject>;
                ftp?: ReturnType<typeof dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage.prototype.toObject>;
                gcs?: ReturnType<typeof dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.prototype.toObject>;
                local?: ReturnType<typeof dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage.prototype.toObject>;
                odata?: ReturnType<typeof dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage.prototype.toObject>;
                s3?: ReturnType<typeof dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.toObject>;
                scp?: ReturnType<typeof dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.toObject>;
                swift?: ReturnType<typeof dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage.prototype.toObject>;
                http?: ReturnType<typeof dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.prototype.toObject>;
            } = {};
            if (this.azure != null) {
                data.azure = this.azure.toObject();
            }
            if (this.box != null) {
                data.box = this.box.toObject();
            }
            if (this.dropbox != null) {
                data.dropbox = this.dropbox.toObject();
            }
            if (this.ftp != null) {
                data.ftp = this.ftp.toObject();
            }
            if (this.gcs != null) {
                data.gcs = this.gcs.toObject();
            }
            if (this.local != null) {
                data.local = this.local.toObject();
            }
            if (this.odata != null) {
                data.odata = this.odata.toObject();
            }
            if (this.s3 != null) {
                data.s3 = this.s3.toObject();
            }
            if (this.scp != null) {
                data.scp = this.scp.toObject();
            }
            if (this.swift != null) {
                data.swift = this.swift.toObject();
            }
            if (this.http != null) {
                data.http = this.http.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_azure)
                writer.writeMessage(1, this.azure, () => this.azure.serialize(writer));
            if (this.has_box)
                writer.writeMessage(2, this.box, () => this.box.serialize(writer));
            if (this.has_dropbox)
                writer.writeMessage(3, this.dropbox, () => this.dropbox.serialize(writer));
            if (this.has_ftp)
                writer.writeMessage(4, this.ftp, () => this.ftp.serialize(writer));
            if (this.has_gcs)
                writer.writeMessage(5, this.gcs, () => this.gcs.serialize(writer));
            if (this.has_local)
                writer.writeMessage(6, this.local, () => this.local.serialize(writer));
            if (this.has_odata)
                writer.writeMessage(7, this.odata, () => this.odata.serialize(writer));
            if (this.has_s3)
                writer.writeMessage(8, this.s3, () => this.s3.serialize(writer));
            if (this.has_scp)
                writer.writeMessage(9, this.scp, () => this.scp.serialize(writer));
            if (this.has_swift)
                writer.writeMessage(10, this.swift, () => this.swift.serialize(writer));
            if (this.has_http)
                writer.writeMessage(11, this.http, () => this.http.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageWrapper {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageWrapper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.azure, () => message.azure = dependency_1.org.apache.airavata.mft.resource.stubs.azure.storage.AzureStorage.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.box, () => message.box = dependency_2.org.apache.airavata.mft.resource.stubs.box.storage.BoxStorage.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dropbox, () => message.dropbox = dependency_3.org.apache.airavata.mft.resource.stubs.dropbox.storage.DropboxStorage.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ftp, () => message.ftp = dependency_4.org.apache.airavata.mft.resource.stubs.ftp.storage.FTPStorage.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.gcs, () => message.gcs = dependency_5.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.local, () => message.local = dependency_6.org.apache.airavata.mft.resource.stubs.local.storage.LocalStorage.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.odata, () => message.odata = dependency_7.org.apache.airavata.mft.resource.stubs.odata.storage.ODataStorage.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.s3, () => message.s3 = dependency_8.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.scp, () => message.scp = dependency_9.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.swift, () => message.swift = dependency_10.org.apache.airavata.mft.resource.stubs.swift.storage.SwiftStorage.deserialize(reader));
                        break;
                    case 11:
                        reader.readMessage(message.http, () => message.http = dependency_11.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageWrapper {
            return StorageWrapper.deserialize(bytes);
        }
    }
    export class SecretWrapper extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
        constructor(data?: any[] | ({} & (({
            azure?: dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret;
            scp?: never;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret;
            swift?: never;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret;
            http?: never;
        } | {
            azure?: never;
            box?: never;
            dropbox?: never;
            ftp?: never;
            gcs?: never;
            odata?: never;
            s3?: never;
            scp?: never;
            swift?: never;
            http?: dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("azure" in data && data.azure != undefined) {
                    this.azure = data.azure;
                }
                if ("box" in data && data.box != undefined) {
                    this.box = data.box;
                }
                if ("dropbox" in data && data.dropbox != undefined) {
                    this.dropbox = data.dropbox;
                }
                if ("ftp" in data && data.ftp != undefined) {
                    this.ftp = data.ftp;
                }
                if ("gcs" in data && data.gcs != undefined) {
                    this.gcs = data.gcs;
                }
                if ("odata" in data && data.odata != undefined) {
                    this.odata = data.odata;
                }
                if ("s3" in data && data.s3 != undefined) {
                    this.s3 = data.s3;
                }
                if ("scp" in data && data.scp != undefined) {
                    this.scp = data.scp;
                }
                if ("swift" in data && data.swift != undefined) {
                    this.swift = data.swift;
                }
                if ("http" in data && data.http != undefined) {
                    this.http = data.http;
                }
            }
        }
        get azure() {
            return pb_1.Message.getWrapperField(this, dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret, 1) as dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret;
        }
        set azure(value: dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_azure() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get box() {
            return pb_1.Message.getWrapperField(this, dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret, 2) as dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret;
        }
        set box(value: dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_box() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get dropbox() {
            return pb_1.Message.getWrapperField(this, dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret, 3) as dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret;
        }
        set dropbox(value: dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_dropbox() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get ftp() {
            return pb_1.Message.getWrapperField(this, dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret, 4) as dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret;
        }
        set ftp(value: dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret) {
            pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
        }
        get has_ftp() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get gcs() {
            return pb_1.Message.getWrapperField(this, dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret, 5) as dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret;
        }
        set gcs(value: dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret) {
            pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
        }
        get has_gcs() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get odata() {
            return pb_1.Message.getWrapperField(this, dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret, 6) as dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret;
        }
        set odata(value: dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret) {
            pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
        }
        get has_odata() {
            return pb_1.Message.getField(this, 6) != null;
        }
        get s3() {
            return pb_1.Message.getWrapperField(this, dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret, 7) as dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret;
        }
        set s3(value: dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret) {
            pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
        }
        get has_s3() {
            return pb_1.Message.getField(this, 7) != null;
        }
        get scp() {
            return pb_1.Message.getWrapperField(this, dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret, 8) as dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret;
        }
        set scp(value: dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret) {
            pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
        }
        get has_scp() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get swift() {
            return pb_1.Message.getWrapperField(this, dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret, 9) as dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret;
        }
        set swift(value: dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret) {
            pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
        }
        get has_swift() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get http() {
            return pb_1.Message.getWrapperField(this, dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret, 10) as dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret;
        }
        set http(value: dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret) {
            pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
        }
        get has_http() {
            return pb_1.Message.getField(this, 10) != null;
        }
        get secret() {
            const cases: {
                [index: number]: "none" | "azure" | "box" | "dropbox" | "ftp" | "gcs" | "odata" | "s3" | "scp" | "swift" | "http";
            } = {
                0: "none",
                1: "azure",
                2: "box",
                3: "dropbox",
                4: "ftp",
                5: "gcs",
                6: "odata",
                7: "s3",
                8: "scp",
                9: "swift",
                10: "http"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])];
        }
        static fromObject(data: {
            azure?: ReturnType<typeof dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret.prototype.toObject>;
            box?: ReturnType<typeof dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.toObject>;
            dropbox?: ReturnType<typeof dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret.prototype.toObject>;
            ftp?: ReturnType<typeof dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret.prototype.toObject>;
            gcs?: ReturnType<typeof dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.prototype.toObject>;
            odata?: ReturnType<typeof dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret.prototype.toObject>;
            s3?: ReturnType<typeof dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret.prototype.toObject>;
            scp?: ReturnType<typeof dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.toObject>;
            swift?: ReturnType<typeof dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.toObject>;
            http?: ReturnType<typeof dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret.prototype.toObject>;
        }): SecretWrapper {
            const message = new SecretWrapper({});
            if (data.azure != null) {
                message.azure = dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret.fromObject(data.azure);
            }
            if (data.box != null) {
                message.box = dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret.fromObject(data.box);
            }
            if (data.dropbox != null) {
                message.dropbox = dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret.fromObject(data.dropbox);
            }
            if (data.ftp != null) {
                message.ftp = dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret.fromObject(data.ftp);
            }
            if (data.gcs != null) {
                message.gcs = dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.fromObject(data.gcs);
            }
            if (data.odata != null) {
                message.odata = dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret.fromObject(data.odata);
            }
            if (data.s3 != null) {
                message.s3 = dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret.fromObject(data.s3);
            }
            if (data.scp != null) {
                message.scp = dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.fromObject(data.scp);
            }
            if (data.swift != null) {
                message.swift = dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.fromObject(data.swift);
            }
            if (data.http != null) {
                message.http = dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret.fromObject(data.http);
            }
            return message;
        }
        toObject() {
            const data: {
                azure?: ReturnType<typeof dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret.prototype.toObject>;
                box?: ReturnType<typeof dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.toObject>;
                dropbox?: ReturnType<typeof dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret.prototype.toObject>;
                ftp?: ReturnType<typeof dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret.prototype.toObject>;
                gcs?: ReturnType<typeof dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.prototype.toObject>;
                odata?: ReturnType<typeof dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret.prototype.toObject>;
                s3?: ReturnType<typeof dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret.prototype.toObject>;
                scp?: ReturnType<typeof dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.toObject>;
                swift?: ReturnType<typeof dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.toObject>;
                http?: ReturnType<typeof dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret.prototype.toObject>;
            } = {};
            if (this.azure != null) {
                data.azure = this.azure.toObject();
            }
            if (this.box != null) {
                data.box = this.box.toObject();
            }
            if (this.dropbox != null) {
                data.dropbox = this.dropbox.toObject();
            }
            if (this.ftp != null) {
                data.ftp = this.ftp.toObject();
            }
            if (this.gcs != null) {
                data.gcs = this.gcs.toObject();
            }
            if (this.odata != null) {
                data.odata = this.odata.toObject();
            }
            if (this.s3 != null) {
                data.s3 = this.s3.toObject();
            }
            if (this.scp != null) {
                data.scp = this.scp.toObject();
            }
            if (this.swift != null) {
                data.swift = this.swift.toObject();
            }
            if (this.http != null) {
                data.http = this.http.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_azure)
                writer.writeMessage(1, this.azure, () => this.azure.serialize(writer));
            if (this.has_box)
                writer.writeMessage(2, this.box, () => this.box.serialize(writer));
            if (this.has_dropbox)
                writer.writeMessage(3, this.dropbox, () => this.dropbox.serialize(writer));
            if (this.has_ftp)
                writer.writeMessage(4, this.ftp, () => this.ftp.serialize(writer));
            if (this.has_gcs)
                writer.writeMessage(5, this.gcs, () => this.gcs.serialize(writer));
            if (this.has_odata)
                writer.writeMessage(6, this.odata, () => this.odata.serialize(writer));
            if (this.has_s3)
                writer.writeMessage(7, this.s3, () => this.s3.serialize(writer));
            if (this.has_scp)
                writer.writeMessage(8, this.scp, () => this.scp.serialize(writer));
            if (this.has_swift)
                writer.writeMessage(9, this.swift, () => this.swift.serialize(writer));
            if (this.has_http)
                writer.writeMessage(10, this.http, () => this.http.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretWrapper {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretWrapper();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.azure, () => message.azure = dependency_12.org.apache.airavata.mft.credential.stubs.azure.AzureSecret.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.box, () => message.box = dependency_13.org.apache.airavata.mft.credential.stubs.box.BoxSecret.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.dropbox, () => message.dropbox = dependency_14.org.apache.airavata.mft.credential.stubs.dropbox.DropboxSecret.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.ftp, () => message.ftp = dependency_15.org.apache.airavata.mft.credential.stubs.ftp.FTPSecret.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.gcs, () => message.gcs = dependency_16.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.odata, () => message.odata = dependency_17.org.apache.airavata.mft.credential.stubs.odata.ODataSecret.deserialize(reader));
                        break;
                    case 7:
                        reader.readMessage(message.s3, () => message.s3 = dependency_18.org.apache.airavata.mft.credential.stubs.s3.S3Secret.deserialize(reader));
                        break;
                    case 8:
                        reader.readMessage(message.scp, () => message.scp = dependency_19.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserialize(reader));
                        break;
                    case 9:
                        reader.readMessage(message.swift, () => message.swift = dependency_20.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.http, () => message.http = dependency_21.org.apache.airavata.mft.credential.stubs.http.HTTPSecret.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretWrapper {
            return SecretWrapper.deserialize(bytes);
        }
    }
    export class EndpointPaths extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sourcePath?: string;
            destinationPath?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sourcePath" in data && data.sourcePath != undefined) {
                    this.sourcePath = data.sourcePath;
                }
                if ("destinationPath" in data && data.destinationPath != undefined) {
                    this.destinationPath = data.destinationPath;
                }
            }
        }
        get sourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sourcePath(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destinationPath() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destinationPath(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sourcePath?: string;
            destinationPath?: string;
        }): EndpointPaths {
            const message = new EndpointPaths({});
            if (data.sourcePath != null) {
                message.sourcePath = data.sourcePath;
            }
            if (data.destinationPath != null) {
                message.destinationPath = data.destinationPath;
            }
            return message;
        }
        toObject() {
            const data: {
                sourcePath?: string;
                destinationPath?: string;
            } = {};
            if (this.sourcePath != null) {
                data.sourcePath = this.sourcePath;
            }
            if (this.destinationPath != null) {
                data.destinationPath = this.destinationPath;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sourcePath.length)
                writer.writeString(1, this.sourcePath);
            if (this.destinationPath.length)
                writer.writeString(2, this.destinationPath);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointPaths {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointPaths();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sourcePath = reader.readString();
                        break;
                    case 2:
                        message.destinationPath = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointPaths {
            return EndpointPaths.deserialize(bytes);
        }
    }
    export class AgentTransferRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            requestId?: string;
            sourceStorage?: StorageWrapper;
            sourceSecret?: SecretWrapper;
            destinationStorage?: StorageWrapper;
            destinationSecret?: SecretWrapper;
            endpointPaths?: EndpointPaths[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("requestId" in data && data.requestId != undefined) {
                    this.requestId = data.requestId;
                }
                if ("sourceStorage" in data && data.sourceStorage != undefined) {
                    this.sourceStorage = data.sourceStorage;
                }
                if ("sourceSecret" in data && data.sourceSecret != undefined) {
                    this.sourceSecret = data.sourceSecret;
                }
                if ("destinationStorage" in data && data.destinationStorage != undefined) {
                    this.destinationStorage = data.destinationStorage;
                }
                if ("destinationSecret" in data && data.destinationSecret != undefined) {
                    this.destinationSecret = data.destinationSecret;
                }
                if ("endpointPaths" in data && data.endpointPaths != undefined) {
                    this.endpointPaths = data.endpointPaths;
                }
            }
        }
        get requestId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set requestId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sourceStorage() {
            return pb_1.Message.getWrapperField(this, StorageWrapper, 2) as StorageWrapper;
        }
        set sourceStorage(value: StorageWrapper) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_sourceStorage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get sourceSecret() {
            return pb_1.Message.getWrapperField(this, SecretWrapper, 3) as SecretWrapper;
        }
        set sourceSecret(value: SecretWrapper) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_sourceSecret() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get destinationStorage() {
            return pb_1.Message.getWrapperField(this, StorageWrapper, 4) as StorageWrapper;
        }
        set destinationStorage(value: StorageWrapper) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_destinationStorage() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get destinationSecret() {
            return pb_1.Message.getWrapperField(this, SecretWrapper, 5) as SecretWrapper;
        }
        set destinationSecret(value: SecretWrapper) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_destinationSecret() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get endpointPaths() {
            return pb_1.Message.getRepeatedWrapperField(this, EndpointPaths, 6) as EndpointPaths[];
        }
        set endpointPaths(value: EndpointPaths[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            requestId?: string;
            sourceStorage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
            sourceSecret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
            destinationStorage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
            destinationSecret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
            endpointPaths?: ReturnType<typeof EndpointPaths.prototype.toObject>[];
        }): AgentTransferRequest {
            const message = new AgentTransferRequest({});
            if (data.requestId != null) {
                message.requestId = data.requestId;
            }
            if (data.sourceStorage != null) {
                message.sourceStorage = StorageWrapper.fromObject(data.sourceStorage);
            }
            if (data.sourceSecret != null) {
                message.sourceSecret = SecretWrapper.fromObject(data.sourceSecret);
            }
            if (data.destinationStorage != null) {
                message.destinationStorage = StorageWrapper.fromObject(data.destinationStorage);
            }
            if (data.destinationSecret != null) {
                message.destinationSecret = SecretWrapper.fromObject(data.destinationSecret);
            }
            if (data.endpointPaths != null) {
                message.endpointPaths = data.endpointPaths.map(item => EndpointPaths.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                requestId?: string;
                sourceStorage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
                sourceSecret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
                destinationStorage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
                destinationSecret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
                endpointPaths?: ReturnType<typeof EndpointPaths.prototype.toObject>[];
            } = {};
            if (this.requestId != null) {
                data.requestId = this.requestId;
            }
            if (this.sourceStorage != null) {
                data.sourceStorage = this.sourceStorage.toObject();
            }
            if (this.sourceSecret != null) {
                data.sourceSecret = this.sourceSecret.toObject();
            }
            if (this.destinationStorage != null) {
                data.destinationStorage = this.destinationStorage.toObject();
            }
            if (this.destinationSecret != null) {
                data.destinationSecret = this.destinationSecret.toObject();
            }
            if (this.endpointPaths != null) {
                data.endpointPaths = this.endpointPaths.map((item: EndpointPaths) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.requestId.length)
                writer.writeString(1, this.requestId);
            if (this.has_sourceStorage)
                writer.writeMessage(2, this.sourceStorage, () => this.sourceStorage.serialize(writer));
            if (this.has_sourceSecret)
                writer.writeMessage(3, this.sourceSecret, () => this.sourceSecret.serialize(writer));
            if (this.has_destinationStorage)
                writer.writeMessage(4, this.destinationStorage, () => this.destinationStorage.serialize(writer));
            if (this.has_destinationSecret)
                writer.writeMessage(5, this.destinationSecret, () => this.destinationSecret.serialize(writer));
            if (this.endpointPaths.length)
                writer.writeRepeatedMessage(6, this.endpointPaths, (item: EndpointPaths) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AgentTransferRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AgentTransferRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.requestId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.sourceStorage, () => message.sourceStorage = StorageWrapper.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.sourceSecret, () => message.sourceSecret = SecretWrapper.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.destinationStorage, () => message.destinationStorage = StorageWrapper.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.destinationSecret, () => message.destinationSecret = SecretWrapper.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.endpointPaths, () => pb_1.Message.addToRepeatedWrapperField(message, 6, EndpointPaths.deserialize(reader), EndpointPaths));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AgentTransferRequest {
            return AgentTransferRequest.deserialize(bytes);
        }
    }
    export class FileMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            friendlyName?: string;
            resourceSize?: number;
            createdTime?: number;
            updateTime?: number;
            md5sum?: string;
            resourcePath?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("friendlyName" in data && data.friendlyName != undefined) {
                    this.friendlyName = data.friendlyName;
                }
                if ("resourceSize" in data && data.resourceSize != undefined) {
                    this.resourceSize = data.resourceSize;
                }
                if ("createdTime" in data && data.createdTime != undefined) {
                    this.createdTime = data.createdTime;
                }
                if ("updateTime" in data && data.updateTime != undefined) {
                    this.updateTime = data.updateTime;
                }
                if ("md5sum" in data && data.md5sum != undefined) {
                    this.md5sum = data.md5sum;
                }
                if ("resourcePath" in data && data.resourcePath != undefined) {
                    this.resourcePath = data.resourcePath;
                }
            }
        }
        get friendlyName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set friendlyName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get resourceSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set resourceSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get createdTime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set createdTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get updateTime() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set updateTime(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get md5sum() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set md5sum(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get resourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set resourcePath(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            friendlyName?: string;
            resourceSize?: number;
            createdTime?: number;
            updateTime?: number;
            md5sum?: string;
            resourcePath?: string;
        }): FileMetadata {
            const message = new FileMetadata({});
            if (data.friendlyName != null) {
                message.friendlyName = data.friendlyName;
            }
            if (data.resourceSize != null) {
                message.resourceSize = data.resourceSize;
            }
            if (data.createdTime != null) {
                message.createdTime = data.createdTime;
            }
            if (data.updateTime != null) {
                message.updateTime = data.updateTime;
            }
            if (data.md5sum != null) {
                message.md5sum = data.md5sum;
            }
            if (data.resourcePath != null) {
                message.resourcePath = data.resourcePath;
            }
            return message;
        }
        toObject() {
            const data: {
                friendlyName?: string;
                resourceSize?: number;
                createdTime?: number;
                updateTime?: number;
                md5sum?: string;
                resourcePath?: string;
            } = {};
            if (this.friendlyName != null) {
                data.friendlyName = this.friendlyName;
            }
            if (this.resourceSize != null) {
                data.resourceSize = this.resourceSize;
            }
            if (this.createdTime != null) {
                data.createdTime = this.createdTime;
            }
            if (this.updateTime != null) {
                data.updateTime = this.updateTime;
            }
            if (this.md5sum != null) {
                data.md5sum = this.md5sum;
            }
            if (this.resourcePath != null) {
                data.resourcePath = this.resourcePath;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.friendlyName.length)
                writer.writeString(1, this.friendlyName);
            if (this.resourceSize != 0)
                writer.writeInt64(2, this.resourceSize);
            if (this.createdTime != 0)
                writer.writeInt64(3, this.createdTime);
            if (this.updateTime != 0)
                writer.writeInt64(4, this.updateTime);
            if (this.md5sum.length)
                writer.writeString(5, this.md5sum);
            if (this.resourcePath.length)
                writer.writeString(6, this.resourcePath);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FileMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FileMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.friendlyName = reader.readString();
                        break;
                    case 2:
                        message.resourceSize = reader.readInt64();
                        break;
                    case 3:
                        message.createdTime = reader.readInt64();
                        break;
                    case 4:
                        message.updateTime = reader.readInt64();
                        break;
                    case 5:
                        message.md5sum = reader.readString();
                        break;
                    case 6:
                        message.resourcePath = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FileMetadata {
            return FileMetadata.deserialize(bytes);
        }
    }
    export class DirectoryMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            friendlyName?: string;
            createdTime?: number;
            updateTime?: number;
            resourcePath?: string;
            directories?: DirectoryMetadata[];
            files?: FileMetadata[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("friendlyName" in data && data.friendlyName != undefined) {
                    this.friendlyName = data.friendlyName;
                }
                if ("createdTime" in data && data.createdTime != undefined) {
                    this.createdTime = data.createdTime;
                }
                if ("updateTime" in data && data.updateTime != undefined) {
                    this.updateTime = data.updateTime;
                }
                if ("resourcePath" in data && data.resourcePath != undefined) {
                    this.resourcePath = data.resourcePath;
                }
                if ("directories" in data && data.directories != undefined) {
                    this.directories = data.directories;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get friendlyName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set friendlyName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get createdTime() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set createdTime(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get updateTime() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set updateTime(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get resourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resourcePath(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get directories() {
            return pb_1.Message.getRepeatedWrapperField(this, DirectoryMetadata, 5) as DirectoryMetadata[];
        }
        set directories(value: DirectoryMetadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, FileMetadata, 6) as FileMetadata[];
        }
        set files(value: FileMetadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            friendlyName?: string;
            createdTime?: number;
            updateTime?: number;
            resourcePath?: string;
            directories?: ReturnType<typeof DirectoryMetadata.prototype.toObject>[];
            files?: ReturnType<typeof FileMetadata.prototype.toObject>[];
        }): DirectoryMetadata {
            const message = new DirectoryMetadata({});
            if (data.friendlyName != null) {
                message.friendlyName = data.friendlyName;
            }
            if (data.createdTime != null) {
                message.createdTime = data.createdTime;
            }
            if (data.updateTime != null) {
                message.updateTime = data.updateTime;
            }
            if (data.resourcePath != null) {
                message.resourcePath = data.resourcePath;
            }
            if (data.directories != null) {
                message.directories = data.directories.map(item => DirectoryMetadata.fromObject(item));
            }
            if (data.files != null) {
                message.files = data.files.map(item => FileMetadata.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                friendlyName?: string;
                createdTime?: number;
                updateTime?: number;
                resourcePath?: string;
                directories?: ReturnType<typeof DirectoryMetadata.prototype.toObject>[];
                files?: ReturnType<typeof FileMetadata.prototype.toObject>[];
            } = {};
            if (this.friendlyName != null) {
                data.friendlyName = this.friendlyName;
            }
            if (this.createdTime != null) {
                data.createdTime = this.createdTime;
            }
            if (this.updateTime != null) {
                data.updateTime = this.updateTime;
            }
            if (this.resourcePath != null) {
                data.resourcePath = this.resourcePath;
            }
            if (this.directories != null) {
                data.directories = this.directories.map((item: DirectoryMetadata) => item.toObject());
            }
            if (this.files != null) {
                data.files = this.files.map((item: FileMetadata) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.friendlyName.length)
                writer.writeString(1, this.friendlyName);
            if (this.createdTime != 0)
                writer.writeInt64(2, this.createdTime);
            if (this.updateTime != 0)
                writer.writeInt64(3, this.updateTime);
            if (this.resourcePath.length)
                writer.writeString(4, this.resourcePath);
            if (this.directories.length)
                writer.writeRepeatedMessage(5, this.directories, (item: DirectoryMetadata) => item.serialize(writer));
            if (this.files.length)
                writer.writeRepeatedMessage(6, this.files, (item: FileMetadata) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DirectoryMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DirectoryMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.friendlyName = reader.readString();
                        break;
                    case 2:
                        message.createdTime = reader.readInt64();
                        break;
                    case 3:
                        message.updateTime = reader.readInt64();
                        break;
                    case 4:
                        message.resourcePath = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.directories, () => pb_1.Message.addToRepeatedWrapperField(message, 5, DirectoryMetadata.deserialize(reader), DirectoryMetadata));
                        break;
                    case 6:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 6, FileMetadata.deserialize(reader), FileMetadata));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DirectoryMetadata {
            return DirectoryMetadata.deserialize(bytes);
        }
    }
    export class ResourceMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            file?: FileMetadata;
            directory?: never;
            error?: never;
        } | {
            file?: never;
            directory?: DirectoryMetadata;
            error?: never;
        } | {
            file?: never;
            directory?: never;
            error?: MetadataFetchError;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("file" in data && data.file != undefined) {
                    this.file = data.file;
                }
                if ("directory" in data && data.directory != undefined) {
                    this.directory = data.directory;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get file() {
            return pb_1.Message.getWrapperField(this, FileMetadata, 1) as FileMetadata;
        }
        set file(value: FileMetadata) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_file() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get directory() {
            return pb_1.Message.getWrapperField(this, DirectoryMetadata, 2) as DirectoryMetadata;
        }
        set directory(value: DirectoryMetadata) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_directory() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, MetadataFetchError.NOT_FOUND) as MetadataFetchError;
        }
        set error(value: MetadataFetchError) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_error() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get metadata() {
            const cases: {
                [index: number]: "none" | "file" | "directory" | "error";
            } = {
                0: "none",
                1: "file",
                2: "directory",
                3: "error"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            file?: ReturnType<typeof FileMetadata.prototype.toObject>;
            directory?: ReturnType<typeof DirectoryMetadata.prototype.toObject>;
            error?: MetadataFetchError;
        }): ResourceMetadata {
            const message = new ResourceMetadata({});
            if (data.file != null) {
                message.file = FileMetadata.fromObject(data.file);
            }
            if (data.directory != null) {
                message.directory = DirectoryMetadata.fromObject(data.directory);
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                file?: ReturnType<typeof FileMetadata.prototype.toObject>;
                directory?: ReturnType<typeof DirectoryMetadata.prototype.toObject>;
                error?: MetadataFetchError;
            } = {};
            if (this.file != null) {
                data.file = this.file.toObject();
            }
            if (this.directory != null) {
                data.directory = this.directory.toObject();
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_file)
                writer.writeMessage(1, this.file, () => this.file.serialize(writer));
            if (this.has_directory)
                writer.writeMessage(2, this.directory, () => this.directory.serialize(writer));
            if (this.has_error)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.file, () => message.file = FileMetadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.directory, () => message.directory = DirectoryMetadata.deserialize(reader));
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceMetadata {
            return ResourceMetadata.deserialize(bytes);
        }
    }
    export class GetResourceMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resourcePath?: string;
            storage?: StorageWrapper;
            secret?: SecretWrapper;
            recursiveSearch?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resourcePath" in data && data.resourcePath != undefined) {
                    this.resourcePath = data.resourcePath;
                }
                if ("storage" in data && data.storage != undefined) {
                    this.storage = data.storage;
                }
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("recursiveSearch" in data && data.recursiveSearch != undefined) {
                    this.recursiveSearch = data.recursiveSearch;
                }
            }
        }
        get resourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resourcePath(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get storage() {
            return pb_1.Message.getWrapperField(this, StorageWrapper, 2) as StorageWrapper;
        }
        set storage(value: StorageWrapper) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_storage() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get secret() {
            return pb_1.Message.getWrapperField(this, SecretWrapper, 3) as SecretWrapper;
        }
        set secret(value: SecretWrapper) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_secret() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get recursiveSearch() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set recursiveSearch(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            resourcePath?: string;
            storage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
            secret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
            recursiveSearch?: boolean;
        }): GetResourceMetadataRequest {
            const message = new GetResourceMetadataRequest({});
            if (data.resourcePath != null) {
                message.resourcePath = data.resourcePath;
            }
            if (data.storage != null) {
                message.storage = StorageWrapper.fromObject(data.storage);
            }
            if (data.secret != null) {
                message.secret = SecretWrapper.fromObject(data.secret);
            }
            if (data.recursiveSearch != null) {
                message.recursiveSearch = data.recursiveSearch;
            }
            return message;
        }
        toObject() {
            const data: {
                resourcePath?: string;
                storage?: ReturnType<typeof StorageWrapper.prototype.toObject>;
                secret?: ReturnType<typeof SecretWrapper.prototype.toObject>;
                recursiveSearch?: boolean;
            } = {};
            if (this.resourcePath != null) {
                data.resourcePath = this.resourcePath;
            }
            if (this.storage != null) {
                data.storage = this.storage.toObject();
            }
            if (this.secret != null) {
                data.secret = this.secret.toObject();
            }
            if (this.recursiveSearch != null) {
                data.recursiveSearch = this.recursiveSearch;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resourcePath.length)
                writer.writeString(1, this.resourcePath);
            if (this.has_storage)
                writer.writeMessage(2, this.storage, () => this.storage.serialize(writer));
            if (this.has_secret)
                writer.writeMessage(3, this.secret, () => this.secret.serialize(writer));
            if (this.recursiveSearch != false)
                writer.writeBool(4, this.recursiveSearch);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resourcePath = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.storage, () => message.storage = StorageWrapper.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.secret, () => message.secret = SecretWrapper.deserialize(reader));
                        break;
                    case 4:
                        message.recursiveSearch = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetResourceMetadataRequest {
            return GetResourceMetadataRequest.deserialize(bytes);
        }
    }
}
