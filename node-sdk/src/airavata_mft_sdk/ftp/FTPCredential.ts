/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: ftp/FTPCredential.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../CredCommon";
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.credential.stubs.ftp {
    export class FTPSecret extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            userId?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            secretId?: string;
            userId?: string;
            password?: string;
        }): FTPSecret {
            const message = new FTPSecret({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                userId?: string;
                password?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecret {
            return FTPSecret.deserialize(bytes);
        }
    }
    export class FTPSecretGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): FTPSecretGetRequest {
            const message = new FTPSecretGetRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretGetRequest {
            return FTPSecretGetRequest.deserialize(bytes);
        }
    }
    export class FTPSecretCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userId?: string;
            password?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 3) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            userId?: string;
            password?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): FTPSecretCreateRequest {
            const message = new FTPSecretCreateRequest({});
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                userId?: string;
                password?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userId.length)
                writer.writeString(1, this.userId);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (this.has_authzToken)
                writer.writeMessage(3, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userId = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretCreateRequest {
            return FTPSecretCreateRequest.deserialize(bytes);
        }
    }
    export class FTPSecretUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            userId?: string;
            password?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("userId" in data && data.userId != undefined) {
                    this.userId = data.userId;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 4) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            secretId?: string;
            userId?: string;
            password?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): FTPSecretUpdateRequest {
            const message = new FTPSecretUpdateRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.userId != null) {
                message.userId = data.userId;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                userId?: string;
                password?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.userId != null) {
                data.userId = this.userId;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.userId.length)
                writer.writeString(2, this.userId);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.has_authzToken)
                writer.writeMessage(4, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        message.userId = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretUpdateRequest {
            return FTPSecretUpdateRequest.deserialize(bytes);
        }
    }
    export class FTPSecretUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            secretId?: string;
        }): FTPSecretUpdateResponse {
            const message = new FTPSecretUpdateResponse({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretUpdateResponse {
            return FTPSecretUpdateResponse.deserialize(bytes);
        }
    }
    export class FTPSecretDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 4) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): FTPSecretDeleteRequest {
            const message = new FTPSecretDeleteRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(4, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretDeleteRequest {
            return FTPSecretDeleteRequest.deserialize(bytes);
        }
    }
    export class FTPSecretDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): FTPSecretDeleteResponse {
            const message = new FTPSecretDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FTPSecretDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FTPSecretDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FTPSecretDeleteResponse {
            return FTPSecretDeleteResponse.deserialize(bytes);
        }
    }
}
