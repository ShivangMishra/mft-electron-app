// source: CredCommon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.apache.airavata.mft.common.AgentAuth', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.common.AuthToken', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.common.AuthToken.AuthmechanismCase', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.common.DelegateAuth', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.common.PasswordAuth', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.common.UserTokenAuth', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.common.UserTokenAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.common.UserTokenAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.common.UserTokenAuth.displayName = 'proto.org.apache.airavata.mft.common.UserTokenAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.common.PasswordAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.common.PasswordAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.common.PasswordAuth.displayName = 'proto.org.apache.airavata.mft.common.PasswordAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.common.AgentAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.common.AgentAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.common.AgentAuth.displayName = 'proto.org.apache.airavata.mft.common.AgentAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.common.DelegateAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.common.DelegateAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.common.DelegateAuth.displayName = 'proto.org.apache.airavata.mft.common.DelegateAuth';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.common.AuthToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_);
};
goog.inherits(proto.org.apache.airavata.mft.common.AuthToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.common.AuthToken.displayName = 'proto.org.apache.airavata.mft.common.AuthToken';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.common.UserTokenAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.common.UserTokenAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.common.UserTokenAuth}
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.common.UserTokenAuth;
  return proto.org.apache.airavata.mft.common.UserTokenAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.common.UserTokenAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.common.UserTokenAuth}
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.common.UserTokenAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.common.UserTokenAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.UserTokenAuth} returns this
 */
proto.org.apache.airavata.mft.common.UserTokenAuth.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.common.PasswordAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.common.PasswordAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.PasswordAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.common.PasswordAuth}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.common.PasswordAuth;
  return proto.org.apache.airavata.mft.common.PasswordAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.common.PasswordAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.common.PasswordAuth}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.common.PasswordAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.common.PasswordAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.PasswordAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userName = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.PasswordAuth} returns this
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.PasswordAuth} returns this
 */
proto.org.apache.airavata.mft.common.PasswordAuth.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.common.AgentAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.common.AgentAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.AgentAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    agentsecret: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.common.AgentAuth}
 */
proto.org.apache.airavata.mft.common.AgentAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.common.AgentAuth;
  return proto.org.apache.airavata.mft.common.AgentAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.common.AgentAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.common.AgentAuth}
 */
proto.org.apache.airavata.mft.common.AgentAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentsecret(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.common.AgentAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.common.AgentAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.AgentAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAgentsecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.AgentAuth} returns this
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string agentId = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.getAgentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.AgentAuth} returns this
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.setAgentid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string agentSecret = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.getAgentsecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.AgentAuth} returns this
 */
proto.org.apache.airavata.mft.common.AgentAuth.prototype.setAgentsecret = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.common.DelegateAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.common.DelegateAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.DelegateAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientsecret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.common.DelegateAuth;
  return proto.org.apache.airavata.mft.common.DelegateAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.common.DelegateAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientsecret(value);
      break;
    case 4:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.common.DelegateAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.common.DelegateAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.DelegateAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientsecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth} returns this
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientId = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth} returns this
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientSecret = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.getClientsecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth} returns this
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.setClientsecret = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, string> properties = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.org.apache.airavata.mft.common.DelegateAuth} returns this
 */
proto.org.apache.airavata.mft.common.DelegateAuth.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.org.apache.airavata.mft.common.AuthToken.AuthmechanismCase = {
  AUTHMECHANISM_NOT_SET: 0,
  USERTOKENAUTH: 1,
  AGENTAUTH: 2,
  DELEGATEAUTH: 3,
  PASSWORDAUTH: 4
};

/**
 * @return {proto.org.apache.airavata.mft.common.AuthToken.AuthmechanismCase}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.getAuthmechanismCase = function() {
  return /** @type {proto.org.apache.airavata.mft.common.AuthToken.AuthmechanismCase} */(jspb.Message.computeOneofCase(this, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.common.AuthToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.common.AuthToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.AuthToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    usertokenauth: (f = msg.getUsertokenauth()) && proto.org.apache.airavata.mft.common.UserTokenAuth.toObject(includeInstance, f),
    agentauth: (f = msg.getAgentauth()) && proto.org.apache.airavata.mft.common.AgentAuth.toObject(includeInstance, f),
    delegateauth: (f = msg.getDelegateauth()) && proto.org.apache.airavata.mft.common.DelegateAuth.toObject(includeInstance, f),
    passwordauth: (f = msg.getPasswordauth()) && proto.org.apache.airavata.mft.common.PasswordAuth.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.common.AuthToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.common.AuthToken;
  return proto.org.apache.airavata.mft.common.AuthToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.common.AuthToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.common.AuthToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.airavata.mft.common.UserTokenAuth;
      reader.readMessage(value,proto.org.apache.airavata.mft.common.UserTokenAuth.deserializeBinaryFromReader);
      msg.setUsertokenauth(value);
      break;
    case 2:
      var value = new proto.org.apache.airavata.mft.common.AgentAuth;
      reader.readMessage(value,proto.org.apache.airavata.mft.common.AgentAuth.deserializeBinaryFromReader);
      msg.setAgentauth(value);
      break;
    case 3:
      var value = new proto.org.apache.airavata.mft.common.DelegateAuth;
      reader.readMessage(value,proto.org.apache.airavata.mft.common.DelegateAuth.deserializeBinaryFromReader);
      msg.setDelegateauth(value);
      break;
    case 4:
      var value = new proto.org.apache.airavata.mft.common.PasswordAuth;
      reader.readMessage(value,proto.org.apache.airavata.mft.common.PasswordAuth.deserializeBinaryFromReader);
      msg.setPasswordauth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.common.AuthToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.common.AuthToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.common.AuthToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsertokenauth();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.apache.airavata.mft.common.UserTokenAuth.serializeBinaryToWriter
    );
  }
  f = message.getAgentauth();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.airavata.mft.common.AgentAuth.serializeBinaryToWriter
    );
  }
  f = message.getDelegateauth();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.apache.airavata.mft.common.DelegateAuth.serializeBinaryToWriter
    );
  }
  f = message.getPasswordauth();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.org.apache.airavata.mft.common.PasswordAuth.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserTokenAuth userTokenAuth = 1;
 * @return {?proto.org.apache.airavata.mft.common.UserTokenAuth}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.getUsertokenauth = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.UserTokenAuth} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.common.UserTokenAuth, 1));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.UserTokenAuth|undefined} value
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
*/
proto.org.apache.airavata.mft.common.AuthToken.prototype.setUsertokenauth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.clearUsertokenauth = function() {
  return this.setUsertokenauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.hasUsertokenauth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AgentAuth agentAuth = 2;
 * @return {?proto.org.apache.airavata.mft.common.AgentAuth}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.getAgentauth = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AgentAuth} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.common.AgentAuth, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AgentAuth|undefined} value
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
*/
proto.org.apache.airavata.mft.common.AuthToken.prototype.setAgentauth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.clearAgentauth = function() {
  return this.setAgentauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.hasAgentauth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional DelegateAuth delegateAuth = 3;
 * @return {?proto.org.apache.airavata.mft.common.DelegateAuth}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.getDelegateauth = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.DelegateAuth} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.common.DelegateAuth, 3));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.DelegateAuth|undefined} value
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
*/
proto.org.apache.airavata.mft.common.AuthToken.prototype.setDelegateauth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.clearDelegateauth = function() {
  return this.setDelegateauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.hasDelegateauth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PasswordAuth passwordAuth = 4;
 * @return {?proto.org.apache.airavata.mft.common.PasswordAuth}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.getPasswordauth = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.PasswordAuth} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.common.PasswordAuth, 4));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.PasswordAuth|undefined} value
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
*/
proto.org.apache.airavata.mft.common.AuthToken.prototype.setPasswordauth = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.org.apache.airavata.mft.common.AuthToken.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.common.AuthToken} returns this
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.clearPasswordauth = function() {
  return this.setPasswordauth(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.common.AuthToken.prototype.hasPasswordauth = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.org.apache.airavata.mft.common);
