// source: box/BoxCredential.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CredCommon_pb = require('../CredCommon_pb.js');
goog.object.extend(proto, CredCommon_pb);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecret.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretGetRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accesstoken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string accessToken = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretCreateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    accesstoken: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccesstoken(value);
      break;
    case 3:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccesstoken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string accessToken = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.getAccesstoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.setAccesstoken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 3;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 3));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretUpdateResponse.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse;
  return proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.box.BoxSecretDeleteResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.org.apache.airavata.mft.credential.stubs.box);
