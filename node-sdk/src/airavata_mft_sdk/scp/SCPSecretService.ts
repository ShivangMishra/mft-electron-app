/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: scp/SCPSecretService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./SCPCredential";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.credential.service.scp {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSCPSecretServiceService {
        static definition = {
            getSCPSecret: {
                path: "/org.apache.airavata.mft.credential.service.scp.SCPSecretService/getSCPSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserialize(new Uint8Array(bytes))
            },
            createSCPSecret: {
                path: "/org.apache.airavata.mft.credential.service.scp.SCPSecretService/createSCPSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserialize(new Uint8Array(bytes))
            },
            updateSCPSecret: {
                path: "/org.apache.airavata.mft.credential.service.scp.SCPSecretService/updateSCPSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteSCPSecret: {
                path: "/org.apache.airavata.mft.credential.service.scp.SCPSecretService/deleteSCPSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getSCPSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>): void;
        abstract createSCPSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>): void;
        abstract updateSCPSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse>): void;
        abstract deleteSCPSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse>): void;
    }
    export class SCPSecretServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSCPSecretServiceService.definition, "SCPSecretService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getSCPSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>): grpc_1.ClientUnaryCall => {
            return super.getSCPSecret(message, metadata, options, callback);
        };
        createSCPSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecret>): grpc_1.ClientUnaryCall => {
            return super.createSCPSecret(message, metadata, options, callback);
        };
        updateSCPSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateSCPSecret(message, metadata, options, callback);
        };
        deleteSCPSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteSCPSecret(message, metadata, options, callback);
        };
    }
}
