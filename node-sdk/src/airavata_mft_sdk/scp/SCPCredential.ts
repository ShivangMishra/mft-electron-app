/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: scp/SCPCredential.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../CredCommon";
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.credential.stubs.scp {
    export class SCPSecret extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
                if ("publicKey" in data && data.publicKey != undefined) {
                    this.publicKey = data.publicKey;
                }
                if ("passphrase" in data && data.passphrase != undefined) {
                    this.passphrase = data.passphrase;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set privateKey(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get publicKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set publicKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get passphrase() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set passphrase(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            secretId?: string;
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
        }): SCPSecret {
            const message = new SCPSecret({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            if (data.publicKey != null) {
                message.publicKey = data.publicKey;
            }
            if (data.passphrase != null) {
                message.passphrase = data.passphrase;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                privateKey?: string;
                publicKey?: string;
                passphrase?: string;
                user?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            if (this.publicKey != null) {
                data.publicKey = this.publicKey;
            }
            if (this.passphrase != null) {
                data.passphrase = this.passphrase;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.privateKey.length)
                writer.writeString(2, this.privateKey);
            if (this.publicKey.length)
                writer.writeString(3, this.publicKey);
            if (this.passphrase.length)
                writer.writeString(4, this.passphrase);
            if (this.user.length)
                writer.writeString(5, this.user);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        message.privateKey = reader.readString();
                        break;
                    case 3:
                        message.publicKey = reader.readString();
                        break;
                    case 4:
                        message.passphrase = reader.readString();
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecret {
            return SCPSecret.deserialize(bytes);
        }
    }
    export class SCPSecretGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SCPSecretGetRequest {
            const message = new SCPSecretGetRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretGetRequest {
            return SCPSecretGetRequest.deserialize(bytes);
        }
    }
    export class SCPSecretCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
                if ("publicKey" in data && data.publicKey != undefined) {
                    this.publicKey = data.publicKey;
                }
                if ("passphrase" in data && data.passphrase != undefined) {
                    this.passphrase = data.passphrase;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set privateKey(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get publicKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set publicKey(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get passphrase() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set passphrase(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 5) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SCPSecretCreateRequest {
            const message = new SCPSecretCreateRequest({});
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            if (data.publicKey != null) {
                message.publicKey = data.publicKey;
            }
            if (data.passphrase != null) {
                message.passphrase = data.passphrase;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                privateKey?: string;
                publicKey?: string;
                passphrase?: string;
                user?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            if (this.publicKey != null) {
                data.publicKey = this.publicKey;
            }
            if (this.passphrase != null) {
                data.passphrase = this.passphrase;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.privateKey.length)
                writer.writeString(1, this.privateKey);
            if (this.publicKey.length)
                writer.writeString(2, this.publicKey);
            if (this.passphrase.length)
                writer.writeString(3, this.passphrase);
            if (this.user.length)
                writer.writeString(4, this.user);
            if (this.has_authzToken)
                writer.writeMessage(5, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.privateKey = reader.readString();
                        break;
                    case 2:
                        message.publicKey = reader.readString();
                        break;
                    case 3:
                        message.passphrase = reader.readString();
                        break;
                    case 4:
                        message.user = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretCreateRequest {
            return SCPSecretCreateRequest.deserialize(bytes);
        }
    }
    export class SCPSecretUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("privateKey" in data && data.privateKey != undefined) {
                    this.privateKey = data.privateKey;
                }
                if ("publicKey" in data && data.publicKey != undefined) {
                    this.publicKey = data.publicKey;
                }
                if ("passphrase" in data && data.passphrase != undefined) {
                    this.passphrase = data.passphrase;
                }
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get privateKey() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set privateKey(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get publicKey() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set publicKey(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get passphrase() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set passphrase(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get user() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set user(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 6) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 6, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 6) != null;
        }
        static fromObject(data: {
            secretId?: string;
            privateKey?: string;
            publicKey?: string;
            passphrase?: string;
            user?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SCPSecretUpdateRequest {
            const message = new SCPSecretUpdateRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.privateKey != null) {
                message.privateKey = data.privateKey;
            }
            if (data.publicKey != null) {
                message.publicKey = data.publicKey;
            }
            if (data.passphrase != null) {
                message.passphrase = data.passphrase;
            }
            if (data.user != null) {
                message.user = data.user;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                privateKey?: string;
                publicKey?: string;
                passphrase?: string;
                user?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.privateKey != null) {
                data.privateKey = this.privateKey;
            }
            if (this.publicKey != null) {
                data.publicKey = this.publicKey;
            }
            if (this.passphrase != null) {
                data.passphrase = this.passphrase;
            }
            if (this.user != null) {
                data.user = this.user;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.privateKey.length)
                writer.writeString(2, this.privateKey);
            if (this.publicKey.length)
                writer.writeString(3, this.publicKey);
            if (this.passphrase.length)
                writer.writeString(4, this.passphrase);
            if (this.user.length)
                writer.writeString(5, this.user);
            if (this.has_authzToken)
                writer.writeMessage(6, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        message.privateKey = reader.readString();
                        break;
                    case 3:
                        message.publicKey = reader.readString();
                        break;
                    case 4:
                        message.passphrase = reader.readString();
                        break;
                    case 5:
                        message.user = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretUpdateRequest {
            return SCPSecretUpdateRequest.deserialize(bytes);
        }
    }
    export class SCPSecretUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            secretId?: string;
        }): SCPSecretUpdateResponse {
            const message = new SCPSecretUpdateResponse({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretUpdateResponse {
            return SCPSecretUpdateResponse.deserialize(bytes);
        }
    }
    export class SCPSecretDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SCPSecretDeleteRequest {
            const message = new SCPSecretDeleteRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretDeleteRequest {
            return SCPSecretDeleteRequest.deserialize(bytes);
        }
    }
    export class SCPSecretDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): SCPSecretDeleteResponse {
            const message = new SCPSecretDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SCPSecretDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SCPSecretDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SCPSecretDeleteResponse {
            return SCPSecretDeleteResponse.deserialize(bytes);
        }
    }
}
