// source: scp/SCPCredential.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CredCommon_pb = require('../CredCommon_pb.js');
goog.object.extend(proto, CredCommon_pb);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    privatekey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publickey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    passphrase: jspb.Message.getFieldWithDefault(msg, 4, ""),
    user: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivatekey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassphrase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrivatekey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string privateKey = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.getPrivatekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.setPrivatekey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string publicKey = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string passphrase = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.setPassphrase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user = 5;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecret.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretGetRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    privatekey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publickey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    passphrase: jspb.Message.getFieldWithDefault(msg, 3, ""),
    user: jspb.Message.getFieldWithDefault(msg, 4, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivatekey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassphrase(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 5:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrivatekey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string privateKey = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.getPrivatekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.setPrivatekey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string publicKey = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string passphrase = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.setPassphrase = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string user = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 5;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 5));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretCreateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    privatekey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publickey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    passphrase: jspb.Message.getFieldWithDefault(msg, 4, ""),
    user: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrivatekey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublickey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassphrase(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 6:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrivatekey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublickey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassphrase();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string privateKey = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getPrivatekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setPrivatekey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string publicKey = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setPublickey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string passphrase = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getPassphrase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setPassphrase = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string user = 5;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 6;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 6));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretUpdateResponse.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse;
  return proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.scp.SCPSecretDeleteResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.org.apache.airavata.mft.credential.stubs.scp);
