// source: scp/SCPStorage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.repeatedFields_, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    storagesList: jspb.Message.toObjectList(msg.getStoragesList(),
    proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage;
      reader.readMessage(value,proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserializeBinaryFromReader);
      msg.addStorages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoragesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SCPStorage storages = 1;
 * @return {!Array<!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.getStoragesList = function() {
  return /** @type{!Array<!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage, 1));
};


/**
 * @param {!Array<!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse} returns this
*/
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.setStoragesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.addStorages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.prototype.clearStoragesList = function() {
  return this.setStoragesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    storageid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string storageId = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    host: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string host = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.setHost = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 3;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse;
  return proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.org.apache.airavata.mft.resource.stubs.scp.storage);
