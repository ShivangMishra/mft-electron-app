/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: scp/SCPStorageService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./SCPStorage";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.resource.service.scp {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedSCPStorageServiceService {
        static definition = {
            listSCPStorage: {
                path: "/org.apache.airavata.mft.resource.service.scp.SCPStorageService/listSCPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse.deserialize(new Uint8Array(bytes))
            },
            getSCPStorage: {
                path: "/org.apache.airavata.mft.resource.service.scp.SCPStorageService/getSCPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserialize(new Uint8Array(bytes))
            },
            createSCPStorage: {
                path: "/org.apache.airavata.mft.resource.service.scp.SCPStorageService/createSCPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage.deserialize(new Uint8Array(bytes))
            },
            updateSCPStorage: {
                path: "/org.apache.airavata.mft.resource.service.scp.SCPStorageService/updateSCPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteSCPStorage: {
                path: "/org.apache.airavata.mft.resource.service.scp.SCPStorageService/deleteSCPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract listSCPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse>): void;
        abstract getSCPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>): void;
        abstract createSCPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>): void;
        abstract updateSCPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse>): void;
        abstract deleteSCPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse>): void;
    }
    export class SCPStorageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedSCPStorageServiceService.definition, "SCPStorageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        listSCPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.listSCPStorage(message, metadata, options, callback);
        };
        getSCPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>): grpc_1.ClientUnaryCall => {
            return super.getSCPStorage(message, metadata, options, callback);
        };
        createSCPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorage>): grpc_1.ClientUnaryCall => {
            return super.createSCPStorage(message, metadata, options, callback);
        };
        updateSCPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateSCPStorage(message, metadata, options, callback);
        };
        deleteSCPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.scp.storage.SCPStorageDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteSCPStorage(message, metadata, options, callback);
        };
    }
}
