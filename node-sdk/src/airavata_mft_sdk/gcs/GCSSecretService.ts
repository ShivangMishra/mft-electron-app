/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: gcs/GCSSecretService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GCSCredential";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.credential.service.gcs {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGCSSecretServiceService {
        static definition = {
            getGCSSecret: {
                path: "/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/getGCSSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.deserialize(new Uint8Array(bytes))
            },
            createGCSSecret: {
                path: "/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/createGCSSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret.deserialize(new Uint8Array(bytes))
            },
            updateGCSSecret: {
                path: "/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/updateGCSSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteGCSSecret: {
                path: "/org.apache.airavata.mft.credential.service.gcs.GCSSecretService/deleteGCSSecret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getGCSSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>): void;
        abstract createGCSSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>): void;
        abstract updateGCSSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse>): void;
        abstract deleteGCSSecret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse>): void;
    }
    export class GCSSecretServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGCSSecretServiceService.definition, "GCSSecretService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getGCSSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>): grpc_1.ClientUnaryCall => {
            return super.getGCSSecret(message, metadata, options, callback);
        };
        createGCSSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecret>): grpc_1.ClientUnaryCall => {
            return super.createGCSSecret(message, metadata, options, callback);
        };
        updateGCSSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateGCSSecret(message, metadata, options, callback);
        };
        deleteGCSSecret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.gcs.GCSSecretDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteGCSSecret(message, metadata, options, callback);
        };
    }
}
