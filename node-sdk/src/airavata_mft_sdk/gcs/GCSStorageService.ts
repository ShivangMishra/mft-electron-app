/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: gcs/GCSStorageService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GCSStorage";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.resource.service.gcs {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedGCSStorageServiceService {
        static definition = {
            listGCSStorage: {
                path: "/org.apache.airavata.mft.resource.service.gcs.GCSStorageService/listGCSStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse.deserialize(new Uint8Array(bytes))
            },
            getGCSStorage: {
                path: "/org.apache.airavata.mft.resource.service.gcs.GCSStorageService/getGCSStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.deserialize(new Uint8Array(bytes))
            },
            createGCSStorage: {
                path: "/org.apache.airavata.mft.resource.service.gcs.GCSStorageService/createGCSStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage.deserialize(new Uint8Array(bytes))
            },
            updateGCSStorage: {
                path: "/org.apache.airavata.mft.resource.service.gcs.GCSStorageService/updateGCSStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteGCSStorage: {
                path: "/org.apache.airavata.mft.resource.service.gcs.GCSStorageService/deleteGCSStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract listGCSStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse>): void;
        abstract getGCSStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>): void;
        abstract createGCSStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>): void;
        abstract updateGCSStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse>): void;
        abstract deleteGCSStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse>): void;
    }
    export class GCSStorageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGCSStorageServiceService.definition, "GCSStorageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        listGCSStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.listGCSStorage(message, metadata, options, callback);
        };
        getGCSStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>): grpc_1.ClientUnaryCall => {
            return super.getGCSStorage(message, metadata, options, callback);
        };
        createGCSStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorage>): grpc_1.ClientUnaryCall => {
            return super.createGCSStorage(message, metadata, options, callback);
        };
        updateGCSStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateGCSStorage(message, metadata, options, callback);
        };
        deleteGCSStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.gcs.storage.GCSStorageDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteGCSStorage(message, metadata, options, callback);
        };
    }
}
