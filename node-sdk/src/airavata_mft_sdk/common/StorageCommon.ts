/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: common/StorageCommon.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.resource.stubs.storage.common {
    export enum StorageType {
        S3 = 0,
        SCP = 1,
        FTP = 2,
        LOCAL = 3,
        BOX = 4,
        DROPBOX = 5,
        GCS = 6,
        AZURE = 7,
        SWIFT = 8,
        ODATA = 9,
        HTTP = 10
    }
    export enum Error {
        NOT_FOUND = 0,
        NO_PERMISSION = 1,
        LIMIT_OVERFLOWED = 2
    }
    export class StorageTypeResolveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): StorageTypeResolveRequest {
            const message = new StorageTypeResolveRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageTypeResolveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageTypeResolveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageTypeResolveRequest {
            return StorageTypeResolveRequest.deserialize(bytes);
        }
    }
    export class StorageTypeResolveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            storageName?: string;
            storageType?: StorageType;
            error?: Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("storageName" in data && data.storageName != undefined) {
                    this.storageName = data.storageName;
                }
                if ("storageType" in data && data.storageType != undefined) {
                    this.storageType = data.storageType;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get storageName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set storageName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get storageType() {
            return pb_1.Message.getFieldWithDefault(this, 3, StorageType.S3) as StorageType;
        }
        set storageType(value: StorageType) {
            pb_1.Message.setField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 4, Error.NOT_FOUND) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            storageId?: string;
            storageName?: string;
            storageType?: StorageType;
            error?: Error;
        }): StorageTypeResolveResponse {
            const message = new StorageTypeResolveResponse({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.storageName != null) {
                message.storageName = data.storageName;
            }
            if (data.storageType != null) {
                message.storageType = data.storageType;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                storageName?: string;
                storageType?: StorageType;
                error?: Error;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.storageName != null) {
                data.storageName = this.storageName;
            }
            if (this.storageType != null) {
                data.storageType = this.storageType;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.storageName.length)
                writer.writeString(2, this.storageName);
            if (this.storageType != StorageType.S3)
                writer.writeEnum(3, this.storageType);
            if (this.error != Error.NOT_FOUND)
                writer.writeEnum(4, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageTypeResolveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageTypeResolveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.storageName = reader.readString();
                        break;
                    case 3:
                        message.storageType = reader.readEnum();
                        break;
                    case 4:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageTypeResolveResponse {
            return StorageTypeResolveResponse.deserialize(bytes);
        }
    }
    export class SecretForStorage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            secretId?: string;
            storageType?: StorageType;
            error?: Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("storageType" in data && data.storageType != undefined) {
                    this.storageType = data.storageType;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get storageType() {
            return pb_1.Message.getFieldWithDefault(this, 3, StorageType.S3) as StorageType;
        }
        set storageType(value: StorageType) {
            pb_1.Message.setField(this, 3, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 4, Error.NOT_FOUND) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            storageId?: string;
            secretId?: string;
            storageType?: StorageType;
            error?: Error;
        }): SecretForStorage {
            const message = new SecretForStorage({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.storageType != null) {
                message.storageType = data.storageType;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                secretId?: string;
                storageType?: StorageType;
                error?: Error;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.storageType != null) {
                data.storageType = this.storageType;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.secretId.length)
                writer.writeString(2, this.secretId);
            if (this.storageType != StorageType.S3)
                writer.writeEnum(3, this.storageType);
            if (this.error != Error.NOT_FOUND)
                writer.writeEnum(4, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretForStorage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretForStorage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.secretId = reader.readString();
                        break;
                    case 3:
                        message.storageType = reader.readEnum();
                        break;
                    case 4:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretForStorage {
            return SecretForStorage.deserialize(bytes);
        }
    }
    export class SecretForStorageGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): SecretForStorageGetRequest {
            const message = new SecretForStorageGetRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretForStorageGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretForStorageGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretForStorageGetRequest {
            return SecretForStorageGetRequest.deserialize(bytes);
        }
    }
    export class SecretForStorageDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): SecretForStorageDeleteRequest {
            const message = new SecretForStorageDeleteRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretForStorageDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretForStorageDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretForStorageDeleteRequest {
            return SecretForStorageDeleteRequest.deserialize(bytes);
        }
    }
    export class SecretForStorageDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): SecretForStorageDeleteResponse {
            const message = new SecretForStorageDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SecretForStorageDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SecretForStorageDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SecretForStorageDeleteResponse {
            return SecretForStorageDeleteResponse.deserialize(bytes);
        }
    }
    export class StorageListEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            storageName?: string;
            storageType?: StorageType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("storageName" in data && data.storageName != undefined) {
                    this.storageName = data.storageName;
                }
                if ("storageType" in data && data.storageType != undefined) {
                    this.storageType = data.storageType;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get storageName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set storageName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get storageType() {
            return pb_1.Message.getFieldWithDefault(this, 3, StorageType.S3) as StorageType;
        }
        set storageType(value: StorageType) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            storageId?: string;
            storageName?: string;
            storageType?: StorageType;
        }): StorageListEntry {
            const message = new StorageListEntry({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.storageName != null) {
                message.storageName = data.storageName;
            }
            if (data.storageType != null) {
                message.storageType = data.storageType;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                storageName?: string;
                storageType?: StorageType;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.storageName != null) {
                data.storageName = this.storageName;
            }
            if (this.storageType != null) {
                data.storageType = this.storageType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.storageName.length)
                writer.writeString(2, this.storageName);
            if (this.storageType != StorageType.S3)
                writer.writeEnum(3, this.storageType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageListEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageListEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.storageName = reader.readString();
                        break;
                    case 3:
                        message.storageType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageListEntry {
            return StorageListEntry.deserialize(bytes);
        }
    }
    export class StorageListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageList?: StorageListEntry[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageList" in data && data.storageList != undefined) {
                    this.storageList = data.storageList;
                }
            }
        }
        get storageList() {
            return pb_1.Message.getRepeatedWrapperField(this, StorageListEntry, 1) as StorageListEntry[];
        }
        set storageList(value: StorageListEntry[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            storageList?: ReturnType<typeof StorageListEntry.prototype.toObject>[];
        }): StorageListResponse {
            const message = new StorageListResponse({});
            if (data.storageList != null) {
                message.storageList = data.storageList.map(item => StorageListEntry.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                storageList?: ReturnType<typeof StorageListEntry.prototype.toObject>[];
            } = {};
            if (this.storageList != null) {
                data.storageList = this.storageList.map((item: StorageListEntry) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageList.length)
                writer.writeRepeatedMessage(1, this.storageList, (item: StorageListEntry) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.storageList, () => pb_1.Message.addToRepeatedWrapperField(message, 1, StorageListEntry.deserialize(reader), StorageListEntry));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageListResponse {
            return StorageListResponse.deserialize(bytes);
        }
    }
    export class StorageListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            pageNumber?: number;
            pageSize?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pageNumber" in data && data.pageNumber != undefined) {
                    this.pageNumber = data.pageNumber;
                }
                if ("pageSize" in data && data.pageSize != undefined) {
                    this.pageSize = data.pageSize;
                }
            }
        }
        get pageNumber() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set pageNumber(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get pageSize() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set pageSize(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            pageNumber?: number;
            pageSize?: number;
        }): StorageListRequest {
            const message = new StorageListRequest({});
            if (data.pageNumber != null) {
                message.pageNumber = data.pageNumber;
            }
            if (data.pageSize != null) {
                message.pageSize = data.pageSize;
            }
            return message;
        }
        toObject() {
            const data: {
                pageNumber?: number;
                pageSize?: number;
            } = {};
            if (this.pageNumber != null) {
                data.pageNumber = this.pageNumber;
            }
            if (this.pageSize != null) {
                data.pageSize = this.pageSize;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pageNumber != 0)
                writer.writeInt32(1, this.pageNumber);
            if (this.pageSize != 0)
                writer.writeInt32(2, this.pageSize);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.pageNumber = reader.readInt32();
                        break;
                    case 2:
                        message.pageSize = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageListRequest {
            return StorageListRequest.deserialize(bytes);
        }
    }
    export class StorageSearchRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2, 3]];
        constructor(data?: any[] | ({} & (({
            storageId?: string;
            storageName?: never;
            storageType?: never;
        } | {
            storageId?: never;
            storageName?: string;
            storageType?: never;
        } | {
            storageId?: never;
            storageName?: never;
            storageType?: StorageType;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("storageName" in data && data.storageName != undefined) {
                    this.storageName = data.storageName;
                }
                if ("storageType" in data && data.storageType != undefined) {
                    this.storageType = data.storageType;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_storageId() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get storageName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set storageName(value: string) {
            pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
        }
        get has_storageName() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get storageType() {
            return pb_1.Message.getFieldWithDefault(this, 3, StorageType.S3) as StorageType;
        }
        set storageType(value: StorageType) {
            pb_1.Message.setOneofField(this, 3, this.#one_of_decls[0], value);
        }
        get has_storageType() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get searchQuery() {
            const cases: {
                [index: number]: "none" | "storageId" | "storageName" | "storageType";
            } = {
                0: "none",
                1: "storageId",
                2: "storageName",
                3: "storageType"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
        }
        static fromObject(data: {
            storageId?: string;
            storageName?: string;
            storageType?: StorageType;
        }): StorageSearchRequest {
            const message = new StorageSearchRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.storageName != null) {
                message.storageName = data.storageName;
            }
            if (data.storageType != null) {
                message.storageType = data.storageType;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                storageName?: string;
                storageType?: StorageType;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.storageName != null) {
                data.storageName = this.storageName;
            }
            if (this.storageType != null) {
                data.storageType = this.storageType;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_storageId)
                writer.writeString(1, this.storageId);
            if (this.has_storageName)
                writer.writeString(2, this.storageName);
            if (this.has_storageType)
                writer.writeEnum(3, this.storageType);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StorageSearchRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StorageSearchRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.storageName = reader.readString();
                        break;
                    case 3:
                        message.storageType = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StorageSearchRequest {
            return StorageSearchRequest.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedStorageCommonServiceService {
        static definition = {
            resolveStorageType: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/resolveStorageType",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StorageTypeResolveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StorageTypeResolveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StorageTypeResolveResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StorageTypeResolveResponse.deserialize(new Uint8Array(bytes))
            },
            registerSecretForStorage: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/registerSecretForStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SecretForStorage) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SecretForStorage.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SecretForStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SecretForStorage.deserialize(new Uint8Array(bytes))
            },
            getSecretForStorage: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/getSecretForStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SecretForStorageGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SecretForStorageGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SecretForStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SecretForStorage.deserialize(new Uint8Array(bytes))
            },
            deleteSecretsForStorage: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/deleteSecretsForStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SecretForStorageDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SecretForStorageDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SecretForStorageDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SecretForStorageDeleteResponse.deserialize(new Uint8Array(bytes))
            },
            searchStorages: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/searchStorages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StorageSearchRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StorageSearchRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StorageListResponse.deserialize(new Uint8Array(bytes))
            },
            listStorages: {
                path: "/org.apache.airavata.mft.resource.stubs.storage.common.StorageCommonService/listStorages",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: StorageListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => StorageListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: StorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => StorageListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract resolveStorageType(call: grpc_1.ServerUnaryCall<StorageTypeResolveRequest, StorageTypeResolveResponse>, callback: grpc_1.sendUnaryData<StorageTypeResolveResponse>): void;
        abstract registerSecretForStorage(call: grpc_1.ServerUnaryCall<SecretForStorage, SecretForStorage>, callback: grpc_1.sendUnaryData<SecretForStorage>): void;
        abstract getSecretForStorage(call: grpc_1.ServerUnaryCall<SecretForStorageGetRequest, SecretForStorage>, callback: grpc_1.sendUnaryData<SecretForStorage>): void;
        abstract deleteSecretsForStorage(call: grpc_1.ServerUnaryCall<SecretForStorageDeleteRequest, SecretForStorageDeleteResponse>, callback: grpc_1.sendUnaryData<SecretForStorageDeleteResponse>): void;
        abstract searchStorages(call: grpc_1.ServerUnaryCall<StorageSearchRequest, StorageListResponse>, callback: grpc_1.sendUnaryData<StorageListResponse>): void;
        abstract listStorages(call: grpc_1.ServerUnaryCall<StorageListRequest, StorageListResponse>, callback: grpc_1.sendUnaryData<StorageListResponse>): void;
    }
    export class StorageCommonServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedStorageCommonServiceService.definition, "StorageCommonService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        resolveStorageType: GrpcUnaryServiceInterface<StorageTypeResolveRequest, StorageTypeResolveResponse> = (message: StorageTypeResolveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StorageTypeResolveResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StorageTypeResolveResponse>, callback?: grpc_1.requestCallback<StorageTypeResolveResponse>): grpc_1.ClientUnaryCall => {
            return super.resolveStorageType(message, metadata, options, callback);
        };
        registerSecretForStorage: GrpcUnaryServiceInterface<SecretForStorage, SecretForStorage> = (message: SecretForStorage, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorage>, callback?: grpc_1.requestCallback<SecretForStorage>): grpc_1.ClientUnaryCall => {
            return super.registerSecretForStorage(message, metadata, options, callback);
        };
        getSecretForStorage: GrpcUnaryServiceInterface<SecretForStorageGetRequest, SecretForStorage> = (message: SecretForStorageGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorage>, callback?: grpc_1.requestCallback<SecretForStorage>): grpc_1.ClientUnaryCall => {
            return super.getSecretForStorage(message, metadata, options, callback);
        };
        deleteSecretsForStorage: GrpcUnaryServiceInterface<SecretForStorageDeleteRequest, SecretForStorageDeleteResponse> = (message: SecretForStorageDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorageDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SecretForStorageDeleteResponse>, callback?: grpc_1.requestCallback<SecretForStorageDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteSecretsForStorage(message, metadata, options, callback);
        };
        searchStorages: GrpcUnaryServiceInterface<StorageSearchRequest, StorageListResponse> = (message: StorageSearchRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StorageListResponse>, callback?: grpc_1.requestCallback<StorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.searchStorages(message, metadata, options, callback);
        };
        listStorages: GrpcUnaryServiceInterface<StorageListRequest, StorageListResponse> = (message: StorageListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<StorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<StorageListResponse>, callback?: grpc_1.requestCallback<StorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.listStorages(message, metadata, options, callback);
        };
    }
}
