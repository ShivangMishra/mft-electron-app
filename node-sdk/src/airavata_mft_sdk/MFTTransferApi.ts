/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: MFTTransferApi.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CredCommon";
import * as dependency_2 from "./MFTAgentStubs";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.api.service {
    export class CallbackEndpoint extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: CallbackEndpoint.CallbackType;
            endpoint?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, CallbackEndpoint.CallbackType.HTTP) as CallbackEndpoint.CallbackType;
        }
        set type(value: CallbackEndpoint.CallbackType) {
            pb_1.Message.setField(this, 1, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            type?: CallbackEndpoint.CallbackType;
            endpoint?: string;
        }): CallbackEndpoint {
            const message = new CallbackEndpoint({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: CallbackEndpoint.CallbackType;
                endpoint?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != CallbackEndpoint.CallbackType.HTTP)
                writer.writeEnum(1, this.type);
            if (this.endpoint.length)
                writer.writeString(2, this.endpoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallbackEndpoint {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallbackEndpoint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.endpoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CallbackEndpoint {
            return CallbackEndpoint.deserialize(bytes);
        }
    }
    export namespace CallbackEndpoint {
        export enum CallbackType {
            HTTP = 0,
            KAFKA = 1
        }
    }
    export class EndpointPaths extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sourcePath?: string;
            destinationPath?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sourcePath" in data && data.sourcePath != undefined) {
                    this.sourcePath = data.sourcePath;
                }
                if ("destinationPath" in data && data.destinationPath != undefined) {
                    this.destinationPath = data.destinationPath;
                }
            }
        }
        get sourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sourcePath(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get destinationPath() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set destinationPath(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            sourcePath?: string;
            destinationPath?: string;
        }): EndpointPaths {
            const message = new EndpointPaths({});
            if (data.sourcePath != null) {
                message.sourcePath = data.sourcePath;
            }
            if (data.destinationPath != null) {
                message.destinationPath = data.destinationPath;
            }
            return message;
        }
        toObject() {
            const data: {
                sourcePath?: string;
                destinationPath?: string;
            } = {};
            if (this.sourcePath != null) {
                data.sourcePath = this.sourcePath;
            }
            if (this.destinationPath != null) {
                data.destinationPath = this.destinationPath;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sourcePath.length)
                writer.writeString(1, this.sourcePath);
            if (this.destinationPath.length)
                writer.writeString(2, this.destinationPath);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EndpointPaths {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EndpointPaths();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sourcePath = reader.readString();
                        break;
                    case 2:
                        message.destinationPath = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EndpointPaths {
            return EndpointPaths.deserialize(bytes);
        }
    }
    export class TransferApiRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            endpointPaths?: EndpointPaths[];
            sourceStorageId?: string;
            sourceSecretId?: string;
            destinationStorageId?: string;
            destinationSecretId?: string;
            optimizeTransferPath?: boolean;
            targetAgents?: Map<string, number>;
            mftAuthorizationToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
            callbackEndpoints?: CallbackEndpoint[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("endpointPaths" in data && data.endpointPaths != undefined) {
                    this.endpointPaths = data.endpointPaths;
                }
                if ("sourceStorageId" in data && data.sourceStorageId != undefined) {
                    this.sourceStorageId = data.sourceStorageId;
                }
                if ("sourceSecretId" in data && data.sourceSecretId != undefined) {
                    this.sourceSecretId = data.sourceSecretId;
                }
                if ("destinationStorageId" in data && data.destinationStorageId != undefined) {
                    this.destinationStorageId = data.destinationStorageId;
                }
                if ("destinationSecretId" in data && data.destinationSecretId != undefined) {
                    this.destinationSecretId = data.destinationSecretId;
                }
                if ("optimizeTransferPath" in data && data.optimizeTransferPath != undefined) {
                    this.optimizeTransferPath = data.optimizeTransferPath;
                }
                if ("targetAgents" in data && data.targetAgents != undefined) {
                    this.targetAgents = data.targetAgents;
                }
                if ("mftAuthorizationToken" in data && data.mftAuthorizationToken != undefined) {
                    this.mftAuthorizationToken = data.mftAuthorizationToken;
                }
                if ("callbackEndpoints" in data && data.callbackEndpoints != undefined) {
                    this.callbackEndpoints = data.callbackEndpoints;
                }
            }
            if (!this.targetAgents)
                this.targetAgents = new Map();
        }
        get endpointPaths() {
            return pb_1.Message.getRepeatedWrapperField(this, EndpointPaths, 1) as EndpointPaths[];
        }
        set endpointPaths(value: EndpointPaths[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get sourceStorageId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set sourceStorageId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sourceSecretId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set sourceSecretId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get destinationStorageId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set destinationStorageId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get destinationSecretId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set destinationSecretId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get optimizeTransferPath() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set optimizeTransferPath(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get targetAgents() {
            return pb_1.Message.getField(this, 8) as any as Map<string, number>;
        }
        set targetAgents(value: Map<string, number>) {
            pb_1.Message.setField(this, 8, value as any);
        }
        get mftAuthorizationToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 9) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set mftAuthorizationToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_mftAuthorizationToken() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get callbackEndpoints() {
            return pb_1.Message.getRepeatedWrapperField(this, CallbackEndpoint, 10) as CallbackEndpoint[];
        }
        set callbackEndpoints(value: CallbackEndpoint[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            endpointPaths?: ReturnType<typeof EndpointPaths.prototype.toObject>[];
            sourceStorageId?: string;
            sourceSecretId?: string;
            destinationStorageId?: string;
            destinationSecretId?: string;
            optimizeTransferPath?: boolean;
            targetAgents?: {
                [key: string]: number;
            };
            mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            callbackEndpoints?: ReturnType<typeof CallbackEndpoint.prototype.toObject>[];
        }): TransferApiRequest {
            const message = new TransferApiRequest({});
            if (data.endpointPaths != null) {
                message.endpointPaths = data.endpointPaths.map(item => EndpointPaths.fromObject(item));
            }
            if (data.sourceStorageId != null) {
                message.sourceStorageId = data.sourceStorageId;
            }
            if (data.sourceSecretId != null) {
                message.sourceSecretId = data.sourceSecretId;
            }
            if (data.destinationStorageId != null) {
                message.destinationStorageId = data.destinationStorageId;
            }
            if (data.destinationSecretId != null) {
                message.destinationSecretId = data.destinationSecretId;
            }
            if (data.optimizeTransferPath != null) {
                message.optimizeTransferPath = data.optimizeTransferPath;
            }
            if (typeof data.targetAgents == "object") {
                message.targetAgents = new Map(Object.entries(data.targetAgents));
            }
            if (data.mftAuthorizationToken != null) {
                message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.mftAuthorizationToken);
            }
            if (data.callbackEndpoints != null) {
                message.callbackEndpoints = data.callbackEndpoints.map(item => CallbackEndpoint.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                endpointPaths?: ReturnType<typeof EndpointPaths.prototype.toObject>[];
                sourceStorageId?: string;
                sourceSecretId?: string;
                destinationStorageId?: string;
                destinationSecretId?: string;
                optimizeTransferPath?: boolean;
                targetAgents?: {
                    [key: string]: number;
                };
                mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
                callbackEndpoints?: ReturnType<typeof CallbackEndpoint.prototype.toObject>[];
            } = {};
            if (this.endpointPaths != null) {
                data.endpointPaths = this.endpointPaths.map((item: EndpointPaths) => item.toObject());
            }
            if (this.sourceStorageId != null) {
                data.sourceStorageId = this.sourceStorageId;
            }
            if (this.sourceSecretId != null) {
                data.sourceSecretId = this.sourceSecretId;
            }
            if (this.destinationStorageId != null) {
                data.destinationStorageId = this.destinationStorageId;
            }
            if (this.destinationSecretId != null) {
                data.destinationSecretId = this.destinationSecretId;
            }
            if (this.optimizeTransferPath != null) {
                data.optimizeTransferPath = this.optimizeTransferPath;
            }
            if (this.targetAgents != null) {
                data.targetAgents = (Object.fromEntries)(this.targetAgents);
            }
            if (this.mftAuthorizationToken != null) {
                data.mftAuthorizationToken = this.mftAuthorizationToken.toObject();
            }
            if (this.callbackEndpoints != null) {
                data.callbackEndpoints = this.callbackEndpoints.map((item: CallbackEndpoint) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.endpointPaths.length)
                writer.writeRepeatedMessage(1, this.endpointPaths, (item: EndpointPaths) => item.serialize(writer));
            if (this.sourceStorageId.length)
                writer.writeString(2, this.sourceStorageId);
            if (this.sourceSecretId.length)
                writer.writeString(3, this.sourceSecretId);
            if (this.destinationStorageId.length)
                writer.writeString(5, this.destinationStorageId);
            if (this.destinationSecretId.length)
                writer.writeString(6, this.destinationSecretId);
            if (this.optimizeTransferPath != false)
                writer.writeBool(7, this.optimizeTransferPath);
            for (const [key, value] of this.targetAgents) {
                writer.writeMessage(8, this.targetAgents, () => {
                    writer.writeString(1, key);
                    writer.writeInt32(2, value);
                });
            }
            if (this.has_mftAuthorizationToken)
                writer.writeMessage(9, this.mftAuthorizationToken, () => this.mftAuthorizationToken.serialize(writer));
            if (this.callbackEndpoints.length)
                writer.writeRepeatedMessage(10, this.callbackEndpoints, (item: CallbackEndpoint) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferApiRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferApiRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.endpointPaths, () => pb_1.Message.addToRepeatedWrapperField(message, 1, EndpointPaths.deserialize(reader), EndpointPaths));
                        break;
                    case 2:
                        message.sourceStorageId = reader.readString();
                        break;
                    case 3:
                        message.sourceSecretId = reader.readString();
                        break;
                    case 5:
                        message.destinationStorageId = reader.readString();
                        break;
                    case 6:
                        message.destinationSecretId = reader.readString();
                        break;
                    case 7:
                        message.optimizeTransferPath = reader.readBool();
                        break;
                    case 8:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.targetAgents as any, reader, reader.readString, reader.readInt32));
                        break;
                    case 9:
                        reader.readMessage(message.mftAuthorizationToken, () => message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.callbackEndpoints, () => pb_1.Message.addToRepeatedWrapperField(message, 10, CallbackEndpoint.deserialize(reader), CallbackEndpoint));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferApiRequest {
            return TransferApiRequest.deserialize(bytes);
        }
    }
    export class TransferApiResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transferId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transferId" in data && data.transferId != undefined) {
                    this.transferId = data.transferId;
                }
            }
        }
        get transferId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set transferId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            transferId?: string;
        }): TransferApiResponse {
            const message = new TransferApiResponse({});
            if (data.transferId != null) {
                message.transferId = data.transferId;
            }
            return message;
        }
        toObject() {
            const data: {
                transferId?: string;
            } = {};
            if (this.transferId != null) {
                data.transferId = this.transferId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transferId.length)
                writer.writeString(1, this.transferId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferApiResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferApiResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transferId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferApiResponse {
            return TransferApiResponse.deserialize(bytes);
        }
    }
    export class TransferStateApiRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transferId?: string;
            mftAuthorizationToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transferId" in data && data.transferId != undefined) {
                    this.transferId = data.transferId;
                }
                if ("mftAuthorizationToken" in data && data.mftAuthorizationToken != undefined) {
                    this.mftAuthorizationToken = data.mftAuthorizationToken;
                }
            }
        }
        get transferId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set transferId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get mftAuthorizationToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set mftAuthorizationToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_mftAuthorizationToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            transferId?: string;
            mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): TransferStateApiRequest {
            const message = new TransferStateApiRequest({});
            if (data.transferId != null) {
                message.transferId = data.transferId;
            }
            if (data.mftAuthorizationToken != null) {
                message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.mftAuthorizationToken);
            }
            return message;
        }
        toObject() {
            const data: {
                transferId?: string;
                mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.transferId != null) {
                data.transferId = this.transferId;
            }
            if (this.mftAuthorizationToken != null) {
                data.mftAuthorizationToken = this.mftAuthorizationToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transferId.length)
                writer.writeString(1, this.transferId);
            if (this.has_mftAuthorizationToken)
                writer.writeMessage(2, this.mftAuthorizationToken, () => this.mftAuthorizationToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferStateApiRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferStateApiRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transferId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.mftAuthorizationToken, () => message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferStateApiRequest {
            return TransferStateApiRequest.deserialize(bytes);
        }
    }
    export class TransferStateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            updateTimeMils?: number;
            percentage?: number;
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("updateTimeMils" in data && data.updateTimeMils != undefined) {
                    this.updateTimeMils = data.updateTimeMils;
                }
                if ("percentage" in data && data.percentage != undefined) {
                    this.percentage = data.percentage;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get updateTimeMils() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set updateTimeMils(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get percentage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set percentage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            state?: string;
            updateTimeMils?: number;
            percentage?: number;
            description?: string;
        }): TransferStateResponse {
            const message = new TransferStateResponse({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.updateTimeMils != null) {
                message.updateTimeMils = data.updateTimeMils;
            }
            if (data.percentage != null) {
                message.percentage = data.percentage;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                updateTimeMils?: number;
                percentage?: number;
                description?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.updateTimeMils != null) {
                data.updateTimeMils = this.updateTimeMils;
            }
            if (this.percentage != null) {
                data.percentage = this.percentage;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.updateTimeMils != 0)
                writer.writeInt64(2, this.updateTimeMils);
            if (this.percentage != 0)
                writer.writeDouble(3, this.percentage);
            if (this.description.length)
                writer.writeString(4, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferStateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferStateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.updateTimeMils = reader.readInt64();
                        break;
                    case 3:
                        message.percentage = reader.readDouble();
                        break;
                    case 4:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferStateResponse {
            return TransferStateResponse.deserialize(bytes);
        }
    }
    export class TransferStateSummaryResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            state?: string;
            updateTimeMils?: number;
            percentage?: number;
            completed?: string[];
            failed?: string[];
            processing?: string[];
            description?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("state" in data && data.state != undefined) {
                    this.state = data.state;
                }
                if ("updateTimeMils" in data && data.updateTimeMils != undefined) {
                    this.updateTimeMils = data.updateTimeMils;
                }
                if ("percentage" in data && data.percentage != undefined) {
                    this.percentage = data.percentage;
                }
                if ("completed" in data && data.completed != undefined) {
                    this.completed = data.completed;
                }
                if ("failed" in data && data.failed != undefined) {
                    this.failed = data.failed;
                }
                if ("processing" in data && data.processing != undefined) {
                    this.processing = data.processing;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
            }
        }
        get state() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set state(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get updateTimeMils() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set updateTimeMils(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get percentage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set percentage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get completed() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as string[];
        }
        set completed(value: string[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get failed() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set failed(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get processing() {
            return pb_1.Message.getFieldWithDefault(this, 6, []) as string[];
        }
        set processing(value: string[]) {
            pb_1.Message.setField(this, 6, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            state?: string;
            updateTimeMils?: number;
            percentage?: number;
            completed?: string[];
            failed?: string[];
            processing?: string[];
            description?: string;
        }): TransferStateSummaryResponse {
            const message = new TransferStateSummaryResponse({});
            if (data.state != null) {
                message.state = data.state;
            }
            if (data.updateTimeMils != null) {
                message.updateTimeMils = data.updateTimeMils;
            }
            if (data.percentage != null) {
                message.percentage = data.percentage;
            }
            if (data.completed != null) {
                message.completed = data.completed;
            }
            if (data.failed != null) {
                message.failed = data.failed;
            }
            if (data.processing != null) {
                message.processing = data.processing;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            return message;
        }
        toObject() {
            const data: {
                state?: string;
                updateTimeMils?: number;
                percentage?: number;
                completed?: string[];
                failed?: string[];
                processing?: string[];
                description?: string;
            } = {};
            if (this.state != null) {
                data.state = this.state;
            }
            if (this.updateTimeMils != null) {
                data.updateTimeMils = this.updateTimeMils;
            }
            if (this.percentage != null) {
                data.percentage = this.percentage;
            }
            if (this.completed != null) {
                data.completed = this.completed;
            }
            if (this.failed != null) {
                data.failed = this.failed;
            }
            if (this.processing != null) {
                data.processing = this.processing;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.state.length)
                writer.writeString(1, this.state);
            if (this.updateTimeMils != 0)
                writer.writeInt64(2, this.updateTimeMils);
            if (this.percentage != 0)
                writer.writeDouble(3, this.percentage);
            if (this.completed.length)
                writer.writeRepeatedString(4, this.completed);
            if (this.failed.length)
                writer.writeRepeatedString(5, this.failed);
            if (this.processing.length)
                writer.writeRepeatedString(6, this.processing);
            if (this.description.length)
                writer.writeString(7, this.description);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferStateSummaryResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferStateSummaryResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.state = reader.readString();
                        break;
                    case 2:
                        message.updateTimeMils = reader.readInt64();
                        break;
                    case 3:
                        message.percentage = reader.readDouble();
                        break;
                    case 4:
                        pb_1.Message.addToRepeatedField(message, 4, reader.readString());
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        pb_1.Message.addToRepeatedField(message, 6, reader.readString());
                        break;
                    case 7:
                        message.description = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferStateSummaryResponse {
            return TransferStateSummaryResponse.deserialize(bytes);
        }
    }
    export class ResourceAvailabilityResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            available?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("available" in data && data.available != undefined) {
                    this.available = data.available;
                }
            }
        }
        get available() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set available(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            available?: boolean;
        }): ResourceAvailabilityResponse {
            const message = new ResourceAvailabilityResponse({});
            if (data.available != null) {
                message.available = data.available;
            }
            return message;
        }
        toObject() {
            const data: {
                available?: boolean;
            } = {};
            if (this.available != null) {
                data.available = this.available;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.available != false)
                writer.writeBool(1, this.available);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ResourceAvailabilityResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ResourceAvailabilityResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.available = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ResourceAvailabilityResponse {
            return ResourceAvailabilityResponse.deserialize(bytes);
        }
    }
    export class GetResourceMetadataFromIDsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            resourcePath?: string;
            storageId?: string;
            secretId?: string;
            recursiveSearch?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("resourcePath" in data && data.resourcePath != undefined) {
                    this.resourcePath = data.resourcePath;
                }
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("recursiveSearch" in data && data.recursiveSearch != undefined) {
                    this.recursiveSearch = data.recursiveSearch;
                }
            }
        }
        get resourcePath() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set resourcePath(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get recursiveSearch() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set recursiveSearch(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            resourcePath?: string;
            storageId?: string;
            secretId?: string;
            recursiveSearch?: boolean;
        }): GetResourceMetadataFromIDsRequest {
            const message = new GetResourceMetadataFromIDsRequest({});
            if (data.resourcePath != null) {
                message.resourcePath = data.resourcePath;
            }
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.recursiveSearch != null) {
                message.recursiveSearch = data.recursiveSearch;
            }
            return message;
        }
        toObject() {
            const data: {
                resourcePath?: string;
                storageId?: string;
                secretId?: string;
                recursiveSearch?: boolean;
            } = {};
            if (this.resourcePath != null) {
                data.resourcePath = this.resourcePath;
            }
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.recursiveSearch != null) {
                data.recursiveSearch = this.recursiveSearch;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.resourcePath.length)
                writer.writeString(1, this.resourcePath);
            if (this.storageId.length)
                writer.writeString(2, this.storageId);
            if (this.secretId.length)
                writer.writeString(3, this.secretId);
            if (this.recursiveSearch != false)
                writer.writeBool(4, this.recursiveSearch);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetResourceMetadataFromIDsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetResourceMetadataFromIDsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.resourcePath = reader.readString();
                        break;
                    case 2:
                        message.storageId = reader.readString();
                        break;
                    case 3:
                        message.secretId = reader.readString();
                        break;
                    case 4:
                        message.recursiveSearch = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetResourceMetadataFromIDsRequest {
            return GetResourceMetadataFromIDsRequest.deserialize(bytes);
        }
    }
    export class FetchResourceMetadataRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            mftAuthorizationToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        } & (({
            directRequest?: dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest;
            idRequest?: never;
        } | {
            directRequest?: never;
            idRequest?: GetResourceMetadataFromIDsRequest;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("directRequest" in data && data.directRequest != undefined) {
                    this.directRequest = data.directRequest;
                }
                if ("idRequest" in data && data.idRequest != undefined) {
                    this.idRequest = data.idRequest;
                }
                if ("mftAuthorizationToken" in data && data.mftAuthorizationToken != undefined) {
                    this.mftAuthorizationToken = data.mftAuthorizationToken;
                }
            }
        }
        get directRequest() {
            return pb_1.Message.getWrapperField(this, dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest, 1) as dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest;
        }
        set directRequest(value: dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_directRequest() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get idRequest() {
            return pb_1.Message.getWrapperField(this, GetResourceMetadataFromIDsRequest, 2) as GetResourceMetadataFromIDsRequest;
        }
        set idRequest(value: GetResourceMetadataFromIDsRequest) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_idRequest() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get mftAuthorizationToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 3) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set mftAuthorizationToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_mftAuthorizationToken() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get request() {
            const cases: {
                [index: number]: "none" | "directRequest" | "idRequest";
            } = {
                0: "none",
                1: "directRequest",
                2: "idRequest"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            directRequest?: ReturnType<typeof dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest.prototype.toObject>;
            idRequest?: ReturnType<typeof GetResourceMetadataFromIDsRequest.prototype.toObject>;
            mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): FetchResourceMetadataRequest {
            const message = new FetchResourceMetadataRequest({});
            if (data.directRequest != null) {
                message.directRequest = dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest.fromObject(data.directRequest);
            }
            if (data.idRequest != null) {
                message.idRequest = GetResourceMetadataFromIDsRequest.fromObject(data.idRequest);
            }
            if (data.mftAuthorizationToken != null) {
                message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.mftAuthorizationToken);
            }
            return message;
        }
        toObject() {
            const data: {
                directRequest?: ReturnType<typeof dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest.prototype.toObject>;
                idRequest?: ReturnType<typeof GetResourceMetadataFromIDsRequest.prototype.toObject>;
                mftAuthorizationToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.directRequest != null) {
                data.directRequest = this.directRequest.toObject();
            }
            if (this.idRequest != null) {
                data.idRequest = this.idRequest.toObject();
            }
            if (this.mftAuthorizationToken != null) {
                data.mftAuthorizationToken = this.mftAuthorizationToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_directRequest)
                writer.writeMessage(1, this.directRequest, () => this.directRequest.serialize(writer));
            if (this.has_idRequest)
                writer.writeMessage(2, this.idRequest, () => this.idRequest.serialize(writer));
            if (this.has_mftAuthorizationToken)
                writer.writeMessage(3, this.mftAuthorizationToken, () => this.mftAuthorizationToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetchResourceMetadataRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetchResourceMetadataRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.directRequest, () => message.directRequest = dependency_2.org.apache.airavata.mft.agent.stub.GetResourceMetadataRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.idRequest, () => message.idRequest = GetResourceMetadataFromIDsRequest.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.mftAuthorizationToken, () => message.mftAuthorizationToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FetchResourceMetadataRequest {
            return FetchResourceMetadataRequest.deserialize(bytes);
        }
    }
    export class TransferRemoveRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transferId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transferId" in data && data.transferId != undefined) {
                    this.transferId = data.transferId;
                }
            }
        }
        get transferId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set transferId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            transferId?: string;
        }): TransferRemoveRequest {
            const message = new TransferRemoveRequest({});
            if (data.transferId != null) {
                message.transferId = data.transferId;
            }
            return message;
        }
        toObject() {
            const data: {
                transferId?: string;
            } = {};
            if (this.transferId != null) {
                data.transferId = this.transferId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transferId.length)
                writer.writeString(1, this.transferId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferRemoveRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferRemoveRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.transferId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferRemoveRequest {
            return TransferRemoveRequest.deserialize(bytes);
        }
    }
    export class TransferRemoveResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            success?: boolean;
        }): TransferRemoveResponse {
            const message = new TransferRemoveResponse({});
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                success?: boolean;
            } = {};
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.success != false)
                writer.writeBool(1, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferRemoveResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferRemoveResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferRemoveResponse {
            return TransferRemoveResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMFTTransferServiceService {
        static definition = {
            submitTransfer: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/submitTransfer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TransferApiRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TransferApiRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransferApiResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransferApiResponse.deserialize(new Uint8Array(bytes))
            },
            getAllTransferStates: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/getAllTransferStates",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: TransferStateApiRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TransferStateApiRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransferStateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransferStateResponse.deserialize(new Uint8Array(bytes))
            },
            getTransferStateSummary: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/getTransferStateSummary",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TransferStateApiRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TransferStateApiRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransferStateSummaryResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransferStateSummaryResponse.deserialize(new Uint8Array(bytes))
            },
            getResourceAvailability: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/getResourceAvailability",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchResourceMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchResourceMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ResourceAvailabilityResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ResourceAvailabilityResponse.deserialize(new Uint8Array(bytes))
            },
            resourceMetadata: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/resourceMetadata",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: FetchResourceMetadataRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FetchResourceMetadataRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata.deserialize(new Uint8Array(bytes))
            },
            removeTransfer: {
                path: "/org.apache.airavata.mft.api.service.MFTTransferService/removeTransfer",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: TransferRemoveRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => TransferRemoveRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: TransferRemoveResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => TransferRemoveResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract submitTransfer(call: grpc_1.ServerUnaryCall<TransferApiRequest, TransferApiResponse>, callback: grpc_1.sendUnaryData<TransferApiResponse>): void;
        abstract getAllTransferStates(call: grpc_1.ServerWritableStream<TransferStateApiRequest, TransferStateResponse>): void;
        abstract getTransferStateSummary(call: grpc_1.ServerUnaryCall<TransferStateApiRequest, TransferStateSummaryResponse>, callback: grpc_1.sendUnaryData<TransferStateSummaryResponse>): void;
        abstract getResourceAvailability(call: grpc_1.ServerUnaryCall<FetchResourceMetadataRequest, ResourceAvailabilityResponse>, callback: grpc_1.sendUnaryData<ResourceAvailabilityResponse>): void;
        abstract resourceMetadata(call: grpc_1.ServerUnaryCall<FetchResourceMetadataRequest, dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata>, callback: grpc_1.sendUnaryData<dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata>): void;
        abstract removeTransfer(call: grpc_1.ServerUnaryCall<TransferRemoveRequest, TransferRemoveResponse>, callback: grpc_1.sendUnaryData<TransferRemoveResponse>): void;
    }
    export class MFTTransferServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMFTTransferServiceService.definition, "MFTTransferService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        submitTransfer: GrpcUnaryServiceInterface<TransferApiRequest, TransferApiResponse> = (message: TransferApiRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransferApiResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransferApiResponse>, callback?: grpc_1.requestCallback<TransferApiResponse>): grpc_1.ClientUnaryCall => {
            return super.submitTransfer(message, metadata, options, callback);
        };
        getAllTransferStates: GrpcStreamServiceInterface<TransferStateApiRequest, TransferStateResponse> = (message: TransferStateApiRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<TransferStateResponse> => {
            return super.getAllTransferStates(message, metadata, options);
        };
        getTransferStateSummary: GrpcUnaryServiceInterface<TransferStateApiRequest, TransferStateSummaryResponse> = (message: TransferStateApiRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransferStateSummaryResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransferStateSummaryResponse>, callback?: grpc_1.requestCallback<TransferStateSummaryResponse>): grpc_1.ClientUnaryCall => {
            return super.getTransferStateSummary(message, metadata, options, callback);
        };
        getResourceAvailability: GrpcUnaryServiceInterface<FetchResourceMetadataRequest, ResourceAvailabilityResponse> = (message: FetchResourceMetadataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ResourceAvailabilityResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ResourceAvailabilityResponse>, callback?: grpc_1.requestCallback<ResourceAvailabilityResponse>): grpc_1.ClientUnaryCall => {
            return super.getResourceAvailability(message, metadata, options, callback);
        };
        resourceMetadata: GrpcUnaryServiceInterface<FetchResourceMetadataRequest, dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata> = (message: FetchResourceMetadataRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata>, callback?: grpc_1.requestCallback<dependency_2.org.apache.airavata.mft.agent.stub.ResourceMetadata>): grpc_1.ClientUnaryCall => {
            return super.resourceMetadata(message, metadata, options, callback);
        };
        removeTransfer: GrpcUnaryServiceInterface<TransferRemoveRequest, TransferRemoveResponse> = (message: TransferRemoveRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TransferRemoveResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TransferRemoveResponse>, callback?: grpc_1.requestCallback<TransferRemoveResponse>): grpc_1.ClientUnaryCall => {
            return super.removeTransfer(message, metadata, options, callback);
        };
    }
}
