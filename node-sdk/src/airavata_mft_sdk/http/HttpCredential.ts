/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: http/HttpCredential.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../CredCommon";
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.credential.stubs.http {
    export class BasicAuth extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userName?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            userName?: string;
            password?: string;
        }): BasicAuth {
            const message = new BasicAuth({});
            if (data.userName != null) {
                message.userName = data.userName;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                userName?: string;
                password?: string;
            } = {};
            if (this.userName != null) {
                data.userName = this.userName;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userName.length)
                writer.writeString(1, this.userName);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BasicAuth {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BasicAuth();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userName = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BasicAuth {
            return BasicAuth.deserialize(bytes);
        }
    }
    export class TokenAuth extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accessToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accessToken" in data && data.accessToken != undefined) {
                    this.accessToken = data.accessToken;
                }
            }
        }
        get accessToken() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set accessToken(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            accessToken?: string;
        }): TokenAuth {
            const message = new TokenAuth({});
            if (data.accessToken != null) {
                message.accessToken = data.accessToken;
            }
            return message;
        }
        toObject() {
            const data: {
                accessToken?: string;
            } = {};
            if (this.accessToken != null) {
                data.accessToken = this.accessToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accessToken.length)
                writer.writeString(3, this.accessToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenAuth {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenAuth();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.accessToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TokenAuth {
            return TokenAuth.deserialize(bytes);
        }
    }
    export class HTTPSecret extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            secretId?: string;
        } & (({
            basic?: BasicAuth;
            token?: never;
        } | {
            basic?: never;
            token?: TokenAuth;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("basic" in data && data.basic != undefined) {
                    this.basic = data.basic;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get basic() {
            return pb_1.Message.getWrapperField(this, BasicAuth, 2) as BasicAuth;
        }
        set basic(value: BasicAuth) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_basic() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get token() {
            return pb_1.Message.getWrapperField(this, TokenAuth, 3) as TokenAuth;
        }
        set token(value: TokenAuth) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_token() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get auth() {
            const cases: {
                [index: number]: "none" | "basic" | "token";
            } = {
                0: "none",
                2: "basic",
                3: "token"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            secretId?: string;
            basic?: ReturnType<typeof BasicAuth.prototype.toObject>;
            token?: ReturnType<typeof TokenAuth.prototype.toObject>;
        }): HTTPSecret {
            const message = new HTTPSecret({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.basic != null) {
                message.basic = BasicAuth.fromObject(data.basic);
            }
            if (data.token != null) {
                message.token = TokenAuth.fromObject(data.token);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                basic?: ReturnType<typeof BasicAuth.prototype.toObject>;
                token?: ReturnType<typeof TokenAuth.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.basic != null) {
                data.basic = this.basic.toObject();
            }
            if (this.token != null) {
                data.token = this.token.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_basic)
                writer.writeMessage(2, this.basic, () => this.basic.serialize(writer));
            if (this.has_token)
                writer.writeMessage(3, this.token, () => this.token.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.basic, () => message.basic = BasicAuth.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.token, () => message.token = TokenAuth.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecret {
            return HTTPSecret.deserialize(bytes);
        }
    }
    export class HTTPSecretGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): HTTPSecretGetRequest {
            const message = new HTTPSecretGetRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretGetRequest {
            return HTTPSecretGetRequest.deserialize(bytes);
        }
    }
    export class HTTPSecretCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secret?: HTTPSecret;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secret() {
            return pb_1.Message.getWrapperField(this, HTTPSecret, 1) as HTTPSecret;
        }
        set secret(value: HTTPSecret) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_secret() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secret?: ReturnType<typeof HTTPSecret.prototype.toObject>;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): HTTPSecretCreateRequest {
            const message = new HTTPSecretCreateRequest({});
            if (data.secret != null) {
                message.secret = HTTPSecret.fromObject(data.secret);
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secret?: ReturnType<typeof HTTPSecret.prototype.toObject>;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secret != null) {
                data.secret = this.secret.toObject();
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_secret)
                writer.writeMessage(1, this.secret, () => this.secret.serialize(writer));
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.secret, () => message.secret = HTTPSecret.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretCreateRequest {
            return HTTPSecretCreateRequest.deserialize(bytes);
        }
    }
    export class HTTPSecretUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secret?: HTTPSecret;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secret() {
            return pb_1.Message.getWrapperField(this, HTTPSecret, 1) as HTTPSecret;
        }
        set secret(value: HTTPSecret) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_secret() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secret?: ReturnType<typeof HTTPSecret.prototype.toObject>;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): HTTPSecretUpdateRequest {
            const message = new HTTPSecretUpdateRequest({});
            if (data.secret != null) {
                message.secret = HTTPSecret.fromObject(data.secret);
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secret?: ReturnType<typeof HTTPSecret.prototype.toObject>;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secret != null) {
                data.secret = this.secret.toObject();
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_secret)
                writer.writeMessage(1, this.secret, () => this.secret.serialize(writer));
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.secret, () => message.secret = HTTPSecret.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretUpdateRequest {
            return HTTPSecretUpdateRequest.deserialize(bytes);
        }
    }
    export class HTTPSecretUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            secretId?: string;
        }): HTTPSecretUpdateResponse {
            const message = new HTTPSecretUpdateResponse({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretUpdateResponse {
            return HTTPSecretUpdateResponse.deserialize(bytes);
        }
    }
    export class HTTPSecretDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): HTTPSecretDeleteRequest {
            const message = new HTTPSecretDeleteRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretDeleteRequest {
            return HTTPSecretDeleteRequest.deserialize(bytes);
        }
    }
    export class HTTPSecretDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): HTTPSecretDeleteResponse {
            const message = new HTTPSecretDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HTTPSecretDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HTTPSecretDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): HTTPSecretDeleteResponse {
            return HTTPSecretDeleteResponse.deserialize(bytes);
        }
    }
}
