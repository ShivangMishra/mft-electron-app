/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: http/HTTPStorageService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HTTPStorage";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.resource.service.http {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedHTTPStorageServiceService {
        static definition = {
            listHTTPStorage: {
                path: "/org.apache.airavata.mft.resource.service.http.HTTPStorageService/listHTTPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse.deserialize(new Uint8Array(bytes))
            },
            getHTTPStorage: {
                path: "/org.apache.airavata.mft.resource.service.http.HTTPStorageService/getHTTPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.deserialize(new Uint8Array(bytes))
            },
            createHTTPStorage: {
                path: "/org.apache.airavata.mft.resource.service.http.HTTPStorageService/createHTTPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage.deserialize(new Uint8Array(bytes))
            },
            updateHTTPStorage: {
                path: "/org.apache.airavata.mft.resource.service.http.HTTPStorageService/updateHTTPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteHTTPStorage: {
                path: "/org.apache.airavata.mft.resource.service.http.HTTPStorageService/deleteHTTPStorage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract listHTTPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse>): void;
        abstract getHTTPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>): void;
        abstract createHTTPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>): void;
        abstract updateHTTPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse>): void;
        abstract deleteHTTPStorage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse>): void;
    }
    export class HTTPStorageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedHTTPStorageServiceService.definition, "HTTPStorageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        listHTTPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.listHTTPStorage(message, metadata, options, callback);
        };
        getHTTPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>): grpc_1.ClientUnaryCall => {
            return super.getHTTPStorage(message, metadata, options, callback);
        };
        createHTTPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorage>): grpc_1.ClientUnaryCall => {
            return super.createHTTPStorage(message, metadata, options, callback);
        };
        updateHTTPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateHTTPStorage(message, metadata, options, callback);
        };
        deleteHTTPStorage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.http.storage.HTTPStorageDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteHTTPStorage(message, metadata, options, callback);
        };
    }
}
