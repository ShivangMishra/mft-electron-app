/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: s3/S3Storage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.resource.stubs.s3.storage {
    export class S3Storage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            bucketName?: string;
            region?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("bucketName" in data && data.bucketName != undefined) {
                    this.bucketName = data.bucketName;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("useTLS" in data && data.useTLS != undefined) {
                    this.useTLS = data.useTLS;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("enablePathStyleAccess" in data && data.enablePathStyleAccess != undefined) {
                    this.enablePathStyleAccess = data.enablePathStyleAccess;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucketName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucketName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get useTLS() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set useTLS(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get enablePathStyleAccess() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set enablePathStyleAccess(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            storageId?: string;
            bucketName?: string;
            region?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }): S3Storage {
            const message = new S3Storage({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.bucketName != null) {
                message.bucketName = data.bucketName;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.useTLS != null) {
                message.useTLS = data.useTLS;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.enablePathStyleAccess != null) {
                message.enablePathStyleAccess = data.enablePathStyleAccess;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                bucketName?: string;
                region?: string;
                endpoint?: string;
                useTLS?: boolean;
                name?: string;
                enablePathStyleAccess?: boolean;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.bucketName != null) {
                data.bucketName = this.bucketName;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.useTLS != null) {
                data.useTLS = this.useTLS;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.enablePathStyleAccess != null) {
                data.enablePathStyleAccess = this.enablePathStyleAccess;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.bucketName.length)
                writer.writeString(2, this.bucketName);
            if (this.region.length)
                writer.writeString(3, this.region);
            if (this.endpoint.length)
                writer.writeString(4, this.endpoint);
            if (this.useTLS != false)
                writer.writeBool(5, this.useTLS);
            if (this.name.length)
                writer.writeString(6, this.name);
            if (this.enablePathStyleAccess != false)
                writer.writeBool(7, this.enablePathStyleAccess);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3Storage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3Storage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.bucketName = reader.readString();
                        break;
                    case 3:
                        message.region = reader.readString();
                        break;
                    case 4:
                        message.endpoint = reader.readString();
                        break;
                    case 5:
                        message.useTLS = reader.readBool();
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.enablePathStyleAccess = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3Storage {
            return S3Storage.deserialize(bytes);
        }
    }
    export class S3StorageListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            offset?: number;
            limit?: number;
        }): S3StorageListRequest {
            const message = new S3StorageListRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                limit?: number;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeInt32(1, this.offset);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageListRequest {
            return S3StorageListRequest.deserialize(bytes);
        }
    }
    export class S3StorageListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storages?: S3Storage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storages" in data && data.storages != undefined) {
                    this.storages = data.storages;
                }
            }
        }
        get storages() {
            return pb_1.Message.getRepeatedWrapperField(this, S3Storage, 1) as S3Storage[];
        }
        set storages(value: S3Storage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            storages?: ReturnType<typeof S3Storage.prototype.toObject>[];
        }): S3StorageListResponse {
            const message = new S3StorageListResponse({});
            if (data.storages != null) {
                message.storages = data.storages.map(item => S3Storage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                storages?: ReturnType<typeof S3Storage.prototype.toObject>[];
            } = {};
            if (this.storages != null) {
                data.storages = this.storages.map((item: S3Storage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storages.length)
                writer.writeRepeatedMessage(1, this.storages, (item: S3Storage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.storages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, S3Storage.deserialize(reader), S3Storage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageListResponse {
            return S3StorageListResponse.deserialize(bytes);
        }
    }
    export class S3StorageGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): S3StorageGetRequest {
            const message = new S3StorageGetRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageGetRequest {
            return S3StorageGetRequest.deserialize(bytes);
        }
    }
    export class S3StorageCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bucketName?: string;
            region?: string;
            storageId?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bucketName" in data && data.bucketName != undefined) {
                    this.bucketName = data.bucketName;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("useTLS" in data && data.useTLS != undefined) {
                    this.useTLS = data.useTLS;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("enablePathStyleAccess" in data && data.enablePathStyleAccess != undefined) {
                    this.enablePathStyleAccess = data.enablePathStyleAccess;
                }
            }
        }
        get bucketName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set bucketName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get useTLS() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set useTLS(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get enablePathStyleAccess() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set enablePathStyleAccess(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            bucketName?: string;
            region?: string;
            storageId?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }): S3StorageCreateRequest {
            const message = new S3StorageCreateRequest({});
            if (data.bucketName != null) {
                message.bucketName = data.bucketName;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.useTLS != null) {
                message.useTLS = data.useTLS;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.enablePathStyleAccess != null) {
                message.enablePathStyleAccess = data.enablePathStyleAccess;
            }
            return message;
        }
        toObject() {
            const data: {
                bucketName?: string;
                region?: string;
                storageId?: string;
                endpoint?: string;
                useTLS?: boolean;
                name?: string;
                enablePathStyleAccess?: boolean;
            } = {};
            if (this.bucketName != null) {
                data.bucketName = this.bucketName;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.useTLS != null) {
                data.useTLS = this.useTLS;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.enablePathStyleAccess != null) {
                data.enablePathStyleAccess = this.enablePathStyleAccess;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bucketName.length)
                writer.writeString(1, this.bucketName);
            if (this.region.length)
                writer.writeString(2, this.region);
            if (this.storageId.length)
                writer.writeString(3, this.storageId);
            if (this.endpoint.length)
                writer.writeString(4, this.endpoint);
            if (this.useTLS != false)
                writer.writeBool(5, this.useTLS);
            if (this.name.length)
                writer.writeString(6, this.name);
            if (this.enablePathStyleAccess != false)
                writer.writeBool(7, this.enablePathStyleAccess);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bucketName = reader.readString();
                        break;
                    case 2:
                        message.region = reader.readString();
                        break;
                    case 3:
                        message.storageId = reader.readString();
                        break;
                    case 4:
                        message.endpoint = reader.readString();
                        break;
                    case 5:
                        message.useTLS = reader.readBool();
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.enablePathStyleAccess = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageCreateRequest {
            return S3StorageCreateRequest.deserialize(bytes);
        }
    }
    export class S3StorageUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            bucketName?: string;
            region?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("bucketName" in data && data.bucketName != undefined) {
                    this.bucketName = data.bucketName;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("useTLS" in data && data.useTLS != undefined) {
                    this.useTLS = data.useTLS;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("enablePathStyleAccess" in data && data.enablePathStyleAccess != undefined) {
                    this.enablePathStyleAccess = data.enablePathStyleAccess;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bucketName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bucketName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get useTLS() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set useTLS(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get enablePathStyleAccess() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set enablePathStyleAccess(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            storageId?: string;
            bucketName?: string;
            region?: string;
            endpoint?: string;
            useTLS?: boolean;
            name?: string;
            enablePathStyleAccess?: boolean;
        }): S3StorageUpdateRequest {
            const message = new S3StorageUpdateRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.bucketName != null) {
                message.bucketName = data.bucketName;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.useTLS != null) {
                message.useTLS = data.useTLS;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.enablePathStyleAccess != null) {
                message.enablePathStyleAccess = data.enablePathStyleAccess;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                bucketName?: string;
                region?: string;
                endpoint?: string;
                useTLS?: boolean;
                name?: string;
                enablePathStyleAccess?: boolean;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.bucketName != null) {
                data.bucketName = this.bucketName;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.useTLS != null) {
                data.useTLS = this.useTLS;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.enablePathStyleAccess != null) {
                data.enablePathStyleAccess = this.enablePathStyleAccess;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.bucketName.length)
                writer.writeString(2, this.bucketName);
            if (this.region.length)
                writer.writeString(3, this.region);
            if (this.endpoint.length)
                writer.writeString(4, this.endpoint);
            if (this.useTLS != false)
                writer.writeBool(5, this.useTLS);
            if (this.name.length)
                writer.writeString(6, this.name);
            if (this.enablePathStyleAccess != false)
                writer.writeBool(7, this.enablePathStyleAccess);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.bucketName = reader.readString();
                        break;
                    case 3:
                        message.region = reader.readString();
                        break;
                    case 4:
                        message.endpoint = reader.readString();
                        break;
                    case 5:
                        message.useTLS = reader.readBool();
                        break;
                    case 6:
                        message.name = reader.readString();
                        break;
                    case 7:
                        message.enablePathStyleAccess = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageUpdateRequest {
            return S3StorageUpdateRequest.deserialize(bytes);
        }
    }
    export class S3StorageUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): S3StorageUpdateResponse {
            const message = new S3StorageUpdateResponse({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageUpdateResponse {
            return S3StorageUpdateResponse.deserialize(bytes);
        }
    }
    export class S3StorageDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): S3StorageDeleteRequest {
            const message = new S3StorageDeleteRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageDeleteRequest {
            return S3StorageDeleteRequest.deserialize(bytes);
        }
    }
    export class S3StorageDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): S3StorageDeleteResponse {
            const message = new S3StorageDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): S3StorageDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new S3StorageDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): S3StorageDeleteResponse {
            return S3StorageDeleteResponse.deserialize(bytes);
        }
    }
}
