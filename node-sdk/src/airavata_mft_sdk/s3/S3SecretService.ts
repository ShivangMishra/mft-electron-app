/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: s3/S3SecretService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./S3Credential";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.credential.service.s3 {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedS3SecretServiceService {
        static definition = {
            getS3Secret: {
                path: "/org.apache.airavata.mft.credential.service.s3.S3SecretService/getS3Secret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret.deserialize(new Uint8Array(bytes))
            },
            createS3Secret: {
                path: "/org.apache.airavata.mft.credential.service.s3.S3SecretService/createS3Secret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret.deserialize(new Uint8Array(bytes))
            },
            updateS3Secret: {
                path: "/org.apache.airavata.mft.credential.service.s3.S3SecretService/updateS3Secret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteS3Secret: {
                path: "/org.apache.airavata.mft.credential.service.s3.S3SecretService/deleteS3Secret",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract getS3Secret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>): void;
        abstract createS3Secret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>): void;
        abstract updateS3Secret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse>): void;
        abstract deleteS3Secret(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse>): void;
    }
    export class S3SecretServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedS3SecretServiceService.definition, "S3SecretService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        getS3Secret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretGetRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>): grpc_1.ClientUnaryCall => {
            return super.getS3Secret(message, metadata, options, callback);
        };
        createS3Secret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretCreateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3Secret>): grpc_1.ClientUnaryCall => {
            return super.createS3Secret(message, metadata, options, callback);
        };
        updateS3Secret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateS3Secret(message, metadata, options, callback);
        };
        deleteS3Secret: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteRequest, dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.credential.stubs.s3.S3SecretDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteS3Secret(message, metadata, options, callback);
        };
    }
}
