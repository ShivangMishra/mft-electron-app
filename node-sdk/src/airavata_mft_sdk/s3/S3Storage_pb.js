// source: s3/S3Storage.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.repeatedFields_, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.displayName = 'proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucketname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    usetls: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    enablepathstyleaccess: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsetls(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablepathstyleaccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBucketname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsetls();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEnablepathstyleaccess();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bucketName = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getBucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setBucketname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endpoint = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool useTLS = 5;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getUsetls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setUsetls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool enablePathStyleAccess = 7;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.getEnablepathstyleaccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.prototype.setEnablepathstyleaccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 offset = 1;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.setOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    storagesList: jspb.Message.toObjectList(msg.getStoragesList(),
    proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage;
      reader.readMessage(value,proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserializeBinaryFromReader);
      msg.addStorages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStoragesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated S3Storage storages = 1;
 * @return {!Array<!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.getStoragesList = function() {
  return /** @type{!Array<!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage, 1));
};


/**
 * @param {!Array<!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse} returns this
*/
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.setStoragesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.addStorages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.prototype.clearStoragesList = function() {
  return this.setStoragesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    bucketname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    region: jspb.Message.getFieldWithDefault(msg, 2, ""),
    storageid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    usetls: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    enablepathstyleaccess: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsetls(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablepathstyleaccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBucketname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsetls();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEnablepathstyleaccess();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string bucketName = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getBucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setBucketname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string storageId = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endpoint = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool useTLS = 5;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getUsetls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setUsetls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool enablePathStyleAccess = 7;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.getEnablepathstyleaccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.prototype.setEnablepathstyleaccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bucketname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    region: jspb.Message.getFieldWithDefault(msg, 3, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    usetls: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    name: jspb.Message.getFieldWithDefault(msg, 6, ""),
    enablepathstyleaccess: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBucketname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsetls(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablepathstyleaccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBucketname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getUsetls();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEnablepathstyleaccess();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string bucketName = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getBucketname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setBucketname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string region = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string endpoint = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool useTLS = 5;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getUsetls = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setUsetls = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string name = 6;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bool enablePathStyleAccess = 7;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.getEnablepathstyleaccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.prototype.setEnablepathstyleaccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    storageid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStorageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStorageid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string storageId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.prototype.getStorageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.prototype.setStorageid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse;
  return proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse} returns this
 */
proto.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.org.apache.airavata.mft.resource.stubs.s3.storage);
