/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: s3/S3StorageService.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./S3Storage";
import * as grpc_1 from "@grpc/grpc-js";
export namespace org.apache.airavata.mft.resource.service.s3 {
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedS3StorageServiceService {
        static definition = {
            listS3Storage: {
                path: "/org.apache.airavata.mft.resource.service.s3.S3StorageService/listS3Storage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse.deserialize(new Uint8Array(bytes))
            },
            getS3Storage: {
                path: "/org.apache.airavata.mft.resource.service.s3.S3StorageService/getS3Storage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserialize(new Uint8Array(bytes))
            },
            createS3Storage: {
                path: "/org.apache.airavata.mft.resource.service.s3.S3StorageService/createS3Storage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage.deserialize(new Uint8Array(bytes))
            },
            updateS3Storage: {
                path: "/org.apache.airavata.mft.resource.service.s3.S3StorageService/updateS3Storage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse.deserialize(new Uint8Array(bytes))
            },
            deleteS3Storage: {
                path: "/org.apache.airavata.mft.resource.service.s3.S3StorageService/deleteS3Storage",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract listS3Storage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse>): void;
        abstract getS3Storage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>): void;
        abstract createS3Storage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>): void;
        abstract updateS3Storage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse>): void;
        abstract deleteS3Storage(call: grpc_1.ServerUnaryCall<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse>, callback: grpc_1.sendUnaryData<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse>): void;
    }
    export class S3StorageServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedS3StorageServiceService.definition, "S3StorageService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        listS3Storage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageListResponse>): grpc_1.ClientUnaryCall => {
            return super.listS3Storage(message, metadata, options, callback);
        };
        getS3Storage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageGetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>): grpc_1.ClientUnaryCall => {
            return super.getS3Storage(message, metadata, options, callback);
        };
        createS3Storage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageCreateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3Storage>): grpc_1.ClientUnaryCall => {
            return super.createS3Storage(message, metadata, options, callback);
        };
        updateS3Storage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageUpdateResponse>): grpc_1.ClientUnaryCall => {
            return super.updateS3Storage(message, metadata, options, callback);
        };
        deleteS3Storage: GrpcUnaryServiceInterface<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest, dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse> = (message: dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse>, callback?: grpc_1.requestCallback<dependency_1.org.apache.airavata.mft.resource.stubs.s3.storage.S3StorageDeleteResponse>): grpc_1.ClientUnaryCall => {
            return super.deleteS3Storage(message, metadata, options, callback);
        };
    }
}
