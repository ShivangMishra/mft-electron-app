/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: swift/SwiftStorage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.resource.stubs.swift.storage {
    export class SwiftStorage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }): SwiftStorage {
            const message = new SwiftStorage({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.container != null) {
                message.container = data.container;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                container?: string;
                name?: string;
                region?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.container != null) {
                data.container = this.container;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.container.length)
                writer.writeString(2, this.container);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.region.length)
                writer.writeString(5, this.region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.container = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorage {
            return SwiftStorage.deserialize(bytes);
        }
    }
    export class SwiftStorageListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            offset?: number;
            limit?: number;
        }): SwiftStorageListRequest {
            const message = new SwiftStorageListRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                limit?: number;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeInt32(1, this.offset);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageListRequest {
            return SwiftStorageListRequest.deserialize(bytes);
        }
    }
    export class SwiftStorageListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storages?: SwiftStorage[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storages" in data && data.storages != undefined) {
                    this.storages = data.storages;
                }
            }
        }
        get storages() {
            return pb_1.Message.getRepeatedWrapperField(this, SwiftStorage, 1) as SwiftStorage[];
        }
        set storages(value: SwiftStorage[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            storages?: ReturnType<typeof SwiftStorage.prototype.toObject>[];
        }): SwiftStorageListResponse {
            const message = new SwiftStorageListResponse({});
            if (data.storages != null) {
                message.storages = data.storages.map(item => SwiftStorage.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                storages?: ReturnType<typeof SwiftStorage.prototype.toObject>[];
            } = {};
            if (this.storages != null) {
                data.storages = this.storages.map((item: SwiftStorage) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storages.length)
                writer.writeRepeatedMessage(1, this.storages, (item: SwiftStorage) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.storages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SwiftStorage.deserialize(reader), SwiftStorage));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageListResponse {
            return SwiftStorageListResponse.deserialize(bytes);
        }
    }
    export class SwiftStorageGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): SwiftStorageGetRequest {
            const message = new SwiftStorageGetRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageGetRequest {
            return SwiftStorageGetRequest.deserialize(bytes);
        }
    }
    export class SwiftStorageCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }): SwiftStorageCreateRequest {
            const message = new SwiftStorageCreateRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.container != null) {
                message.container = data.container;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                container?: string;
                name?: string;
                region?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.container != null) {
                data.container = this.container;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.container.length)
                writer.writeString(2, this.container);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.region.length)
                writer.writeString(5, this.region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.container = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageCreateRequest {
            return SwiftStorageCreateRequest.deserialize(bytes);
        }
    }
    export class SwiftStorageUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
                if ("container" in data && data.container != undefined) {
                    this.container = data.container;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("region" in data && data.region != undefined) {
                    this.region = data.region;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get container() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set container(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get region() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set region(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            storageId?: string;
            container?: string;
            name?: string;
            region?: string;
        }): SwiftStorageUpdateRequest {
            const message = new SwiftStorageUpdateRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            if (data.container != null) {
                message.container = data.container;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.region != null) {
                message.region = data.region;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
                container?: string;
                name?: string;
                region?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            if (this.container != null) {
                data.container = this.container;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.region != null) {
                data.region = this.region;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (this.container.length)
                writer.writeString(2, this.container);
            if (this.name.length)
                writer.writeString(3, this.name);
            if (this.region.length)
                writer.writeString(5, this.region);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    case 2:
                        message.container = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 5:
                        message.region = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageUpdateRequest {
            return SwiftStorageUpdateRequest.deserialize(bytes);
        }
    }
    export class SwiftStorageUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): SwiftStorageUpdateResponse {
            const message = new SwiftStorageUpdateResponse({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageUpdateResponse {
            return SwiftStorageUpdateResponse.deserialize(bytes);
        }
    }
    export class SwiftStorageDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            storageId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("storageId" in data && data.storageId != undefined) {
                    this.storageId = data.storageId;
                }
            }
        }
        get storageId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set storageId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            storageId?: string;
        }): SwiftStorageDeleteRequest {
            const message = new SwiftStorageDeleteRequest({});
            if (data.storageId != null) {
                message.storageId = data.storageId;
            }
            return message;
        }
        toObject() {
            const data: {
                storageId?: string;
            } = {};
            if (this.storageId != null) {
                data.storageId = this.storageId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.storageId.length)
                writer.writeString(1, this.storageId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.storageId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageDeleteRequest {
            return SwiftStorageDeleteRequest.deserialize(bytes);
        }
    }
    export class SwiftStorageDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): SwiftStorageDeleteResponse {
            const message = new SwiftStorageDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftStorageDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftStorageDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftStorageDeleteResponse {
            return SwiftStorageDeleteResponse.deserialize(bytes);
        }
    }
}
