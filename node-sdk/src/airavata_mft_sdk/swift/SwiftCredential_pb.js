// source: swift/SwiftCredential.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var CredCommon_pb = require('../CredCommon_pb.js');
goog.object.extend(proto, CredCommon_pb);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.SecretCase', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.SecretCase', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.SecretCase', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret', null, global);
goog.exportSymbol('proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.oneofGroups_);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.oneofGroups_);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.oneofGroups_);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.displayName = 'proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    tenant: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenant(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTenant();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string tenant = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.getTenant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.setTenant = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    userdomainname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, ""),
    password: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tenantname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    projectdomainname: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserdomainname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTenantname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProjectdomainname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserdomainname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTenantname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getProjectdomainname();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string userDomainName = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.getUserdomainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.setUserdomainname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string password = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tenantName = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.getTenantname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.setTenantname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string projectDomainName = 5;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.getProjectdomainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.prototype.setProjectdomainname = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.SecretCase = {
  SECRET_NOT_SET: 0,
  V2AUTHSECRET: 2,
  V3AUTHSECRET: 3
};

/**
 * @return {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.SecretCase}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.getSecretCase = function() {
  return /** @type {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.SecretCase} */(jspb.Message.computeOneofCase(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    v2authsecret: (f = msg.getV2authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.toObject(includeInstance, f),
    v3authsecret: (f = msg.getV3authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.toObject(includeInstance, f),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinaryFromReader);
      msg.setV2authsecret(value);
      break;
    case 3:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinaryFromReader);
      msg.setV3authsecret(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getV2authsecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getV3authsecret();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SwiftV2AuthSecret v2AuthSecret = 2;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.getV2authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.setV2authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.clearV2authsecret = function() {
  return this.setV2authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.hasV2authsecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SwiftV3AuthSecret v3AuthSecret = 3;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.getV3authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret, 3));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.setV3authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.clearV3authsecret = function() {
  return this.setV3authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.hasV3authsecret = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string endpoint = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecret.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretGetRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.SecretCase = {
  SECRET_NOT_SET: 0,
  V2AUTHSECRET: 1,
  V3AUTHSECRET: 2
};

/**
 * @return {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.SecretCase}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.getSecretCase = function() {
  return /** @type {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.SecretCase} */(jspb.Message.computeOneofCase(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    v2authsecret: (f = msg.getV2authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.toObject(includeInstance, f),
    v3authsecret: (f = msg.getV3authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.toObject(includeInstance, f),
    endpoint: jspb.Message.getFieldWithDefault(msg, 3, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinaryFromReader);
      msg.setV2authsecret(value);
      break;
    case 2:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinaryFromReader);
      msg.setV3authsecret(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 4:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getV2authsecret();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getV3authsecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional SwiftV2AuthSecret v2AuthSecret = 1;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.getV2authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret, 1));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.setV2authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.clearV2authsecret = function() {
  return this.setV2authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.hasV2authsecret = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SwiftV3AuthSecret v3AuthSecret = 2;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.getV3authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.setV3authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.clearV3authsecret = function() {
  return this.setV3authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.hasV3authsecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string endpoint = 3;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 4;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 4));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretCreateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.oneofGroups_ = [[2,3]];

/**
 * @enum {number}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.SecretCase = {
  SECRET_NOT_SET: 0,
  V2AUTHSECRET: 2,
  V3AUTHSECRET: 3
};

/**
 * @return {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.SecretCase}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getSecretCase = function() {
  return /** @type {proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.SecretCase} */(jspb.Message.computeOneofCase(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    v2authsecret: (f = msg.getV2authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.toObject(includeInstance, f),
    v3authsecret: (f = msg.getV3authsecret()) && proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.toObject(includeInstance, f),
    endpoint: jspb.Message.getFieldWithDefault(msg, 4, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.deserializeBinaryFromReader);
      msg.setV2authsecret(value);
      break;
    case 3:
      var value = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret;
      reader.readMessage(value,proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.deserializeBinaryFromReader);
      msg.setV3authsecret(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    case 5:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getV2authsecret();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getV3authsecret();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret.serializeBinaryToWriter
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SwiftV2AuthSecret v2AuthSecret = 2;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getV2authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV2AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.setV2authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.clearV2authsecret = function() {
  return this.setV2authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.hasV2authsecret = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SwiftV3AuthSecret v3AuthSecret = 3;
 * @return {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getV3authsecret = function() {
  return /** @type{?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret} */ (
    jspb.Message.getWrapperField(this, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret, 3));
};


/**
 * @param {?proto.org.apache.airavata.mft.credential.stubs.swift.SwiftV3AuthSecret|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.setV3authsecret = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.clearV3authsecret = function() {
  return this.setV3authsecret(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.hasV3authsecret = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string endpoint = 4;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 5;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 5));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretUpdateResponse.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authztoken: (f = msg.getAuthztoken()) && CredCommon_pb.AuthToken.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSecretid(value);
      break;
    case 2:
      var value = new CredCommon_pb.AuthToken;
      reader.readMessage(value,CredCommon_pb.AuthToken.deserializeBinaryFromReader);
      msg.setAuthztoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSecretid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthztoken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      CredCommon_pb.AuthToken.serializeBinaryToWriter
    );
  }
};


/**
 * optional string secretId = 1;
 * @return {string}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.getSecretid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.setSecretid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional org.apache.airavata.mft.common.AuthToken authzToken = 2;
 * @return {?proto.org.apache.airavata.mft.common.AuthToken}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.getAuthztoken = function() {
  return /** @type{?proto.org.apache.airavata.mft.common.AuthToken} */ (
    jspb.Message.getWrapperField(this, CredCommon_pb.AuthToken, 2));
};


/**
 * @param {?proto.org.apache.airavata.mft.common.AuthToken|undefined} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} returns this
*/
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.setAuthztoken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.clearAuthztoken = function() {
  return this.setAuthztoken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteRequest.prototype.hasAuthztoken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse;
  return proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse} returns this
 */
proto.org.apache.airavata.mft.credential.stubs.swift.SwiftSecretDeleteResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.org.apache.airavata.mft.credential.stubs.swift);
