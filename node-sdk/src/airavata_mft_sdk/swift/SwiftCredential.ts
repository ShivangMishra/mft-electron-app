/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.12.4
 * source: swift/SwiftCredential.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../CredCommon";
import * as pb_1 from "google-protobuf";
export namespace org.apache.airavata.mft.credential.stubs.swift {
    export class SwiftV2AuthSecret extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            tenant?: string;
            userName?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("tenant" in data && data.tenant != undefined) {
                    this.tenant = data.tenant;
                }
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get tenant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set tenant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            tenant?: string;
            userName?: string;
            password?: string;
        }): SwiftV2AuthSecret {
            const message = new SwiftV2AuthSecret({});
            if (data.tenant != null) {
                message.tenant = data.tenant;
            }
            if (data.userName != null) {
                message.userName = data.userName;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                tenant?: string;
                userName?: string;
                password?: string;
            } = {};
            if (this.tenant != null) {
                data.tenant = this.tenant;
            }
            if (this.userName != null) {
                data.userName = this.userName;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.tenant.length)
                writer.writeString(1, this.tenant);
            if (this.userName.length)
                writer.writeString(2, this.userName);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftV2AuthSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftV2AuthSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.tenant = reader.readString();
                        break;
                    case 2:
                        message.userName = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftV2AuthSecret {
            return SwiftV2AuthSecret.deserialize(bytes);
        }
    }
    export class SwiftV3AuthSecret extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            userDomainName?: string;
            userName?: string;
            password?: string;
            tenantName?: string;
            projectDomainName?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("userDomainName" in data && data.userDomainName != undefined) {
                    this.userDomainName = data.userDomainName;
                }
                if ("userName" in data && data.userName != undefined) {
                    this.userName = data.userName;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
                if ("tenantName" in data && data.tenantName != undefined) {
                    this.tenantName = data.tenantName;
                }
                if ("projectDomainName" in data && data.projectDomainName != undefined) {
                    this.projectDomainName = data.projectDomainName;
                }
            }
        }
        get userDomainName() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set userDomainName(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get userName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set userName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tenantName() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tenantName(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get projectDomainName() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set projectDomainName(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            userDomainName?: string;
            userName?: string;
            password?: string;
            tenantName?: string;
            projectDomainName?: string;
        }): SwiftV3AuthSecret {
            const message = new SwiftV3AuthSecret({});
            if (data.userDomainName != null) {
                message.userDomainName = data.userDomainName;
            }
            if (data.userName != null) {
                message.userName = data.userName;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            if (data.tenantName != null) {
                message.tenantName = data.tenantName;
            }
            if (data.projectDomainName != null) {
                message.projectDomainName = data.projectDomainName;
            }
            return message;
        }
        toObject() {
            const data: {
                userDomainName?: string;
                userName?: string;
                password?: string;
                tenantName?: string;
                projectDomainName?: string;
            } = {};
            if (this.userDomainName != null) {
                data.userDomainName = this.userDomainName;
            }
            if (this.userName != null) {
                data.userName = this.userName;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            if (this.tenantName != null) {
                data.tenantName = this.tenantName;
            }
            if (this.projectDomainName != null) {
                data.projectDomainName = this.projectDomainName;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.userDomainName.length)
                writer.writeString(1, this.userDomainName);
            if (this.userName.length)
                writer.writeString(2, this.userName);
            if (this.password.length)
                writer.writeString(3, this.password);
            if (this.tenantName.length)
                writer.writeString(4, this.tenantName);
            if (this.projectDomainName.length)
                writer.writeString(5, this.projectDomainName);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftV3AuthSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftV3AuthSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.userDomainName = reader.readString();
                        break;
                    case 2:
                        message.userName = reader.readString();
                        break;
                    case 3:
                        message.password = reader.readString();
                        break;
                    case 4:
                        message.tenantName = reader.readString();
                        break;
                    case 5:
                        message.projectDomainName = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftV3AuthSecret {
            return SwiftV3AuthSecret.deserialize(bytes);
        }
    }
    export class SwiftSecret extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            secretId?: string;
            endpoint?: string;
        } & (({
            v2AuthSecret?: SwiftV2AuthSecret;
            v3AuthSecret?: never;
        } | {
            v2AuthSecret?: never;
            v3AuthSecret?: SwiftV3AuthSecret;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("v2AuthSecret" in data && data.v2AuthSecret != undefined) {
                    this.v2AuthSecret = data.v2AuthSecret;
                }
                if ("v3AuthSecret" in data && data.v3AuthSecret != undefined) {
                    this.v3AuthSecret = data.v3AuthSecret;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get v2AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV2AuthSecret, 2) as SwiftV2AuthSecret;
        }
        set v2AuthSecret(value: SwiftV2AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_v2AuthSecret() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get v3AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV3AuthSecret, 3) as SwiftV3AuthSecret;
        }
        set v3AuthSecret(value: SwiftV3AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_v3AuthSecret() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get secret() {
            const cases: {
                [index: number]: "none" | "v2AuthSecret" | "v3AuthSecret";
            } = {
                0: "none",
                2: "v2AuthSecret",
                3: "v3AuthSecret"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            secretId?: string;
            v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
            v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
            endpoint?: string;
        }): SwiftSecret {
            const message = new SwiftSecret({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.v2AuthSecret != null) {
                message.v2AuthSecret = SwiftV2AuthSecret.fromObject(data.v2AuthSecret);
            }
            if (data.v3AuthSecret != null) {
                message.v3AuthSecret = SwiftV3AuthSecret.fromObject(data.v3AuthSecret);
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
                v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
                endpoint?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.v2AuthSecret != null) {
                data.v2AuthSecret = this.v2AuthSecret.toObject();
            }
            if (this.v3AuthSecret != null) {
                data.v3AuthSecret = this.v3AuthSecret.toObject();
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_v2AuthSecret)
                writer.writeMessage(2, this.v2AuthSecret, () => this.v2AuthSecret.serialize(writer));
            if (this.has_v3AuthSecret)
                writer.writeMessage(3, this.v3AuthSecret, () => this.v3AuthSecret.serialize(writer));
            if (this.endpoint.length)
                writer.writeString(4, this.endpoint);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecret {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecret();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.v2AuthSecret, () => message.v2AuthSecret = SwiftV2AuthSecret.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.v3AuthSecret, () => message.v3AuthSecret = SwiftV3AuthSecret.deserialize(reader));
                        break;
                    case 4:
                        message.endpoint = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecret {
            return SwiftSecret.deserialize(bytes);
        }
    }
    export class SwiftSecretGetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SwiftSecretGetRequest {
            const message = new SwiftSecretGetRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretGetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretGetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretGetRequest {
            return SwiftSecretGetRequest.deserialize(bytes);
        }
    }
    export class SwiftSecretCreateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({
            endpoint?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        } & (({
            v2AuthSecret?: SwiftV2AuthSecret;
            v3AuthSecret?: never;
        } | {
            v2AuthSecret?: never;
            v3AuthSecret?: SwiftV3AuthSecret;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("v2AuthSecret" in data && data.v2AuthSecret != undefined) {
                    this.v2AuthSecret = data.v2AuthSecret;
                }
                if ("v3AuthSecret" in data && data.v3AuthSecret != undefined) {
                    this.v3AuthSecret = data.v3AuthSecret;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get v2AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV2AuthSecret, 1) as SwiftV2AuthSecret;
        }
        set v2AuthSecret(value: SwiftV2AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_v2AuthSecret() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get v3AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV3AuthSecret, 2) as SwiftV3AuthSecret;
        }
        set v3AuthSecret(value: SwiftV3AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_v3AuthSecret() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 4) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get secret() {
            const cases: {
                [index: number]: "none" | "v2AuthSecret" | "v3AuthSecret";
            } = {
                0: "none",
                1: "v2AuthSecret",
                2: "v3AuthSecret"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
            v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
            endpoint?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SwiftSecretCreateRequest {
            const message = new SwiftSecretCreateRequest({});
            if (data.v2AuthSecret != null) {
                message.v2AuthSecret = SwiftV2AuthSecret.fromObject(data.v2AuthSecret);
            }
            if (data.v3AuthSecret != null) {
                message.v3AuthSecret = SwiftV3AuthSecret.fromObject(data.v3AuthSecret);
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
                v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
                endpoint?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.v2AuthSecret != null) {
                data.v2AuthSecret = this.v2AuthSecret.toObject();
            }
            if (this.v3AuthSecret != null) {
                data.v3AuthSecret = this.v3AuthSecret.toObject();
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_v2AuthSecret)
                writer.writeMessage(1, this.v2AuthSecret, () => this.v2AuthSecret.serialize(writer));
            if (this.has_v3AuthSecret)
                writer.writeMessage(2, this.v3AuthSecret, () => this.v3AuthSecret.serialize(writer));
            if (this.endpoint.length)
                writer.writeString(3, this.endpoint);
            if (this.has_authzToken)
                writer.writeMessage(4, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretCreateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretCreateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.v2AuthSecret, () => message.v2AuthSecret = SwiftV2AuthSecret.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.v3AuthSecret, () => message.v3AuthSecret = SwiftV3AuthSecret.deserialize(reader));
                        break;
                    case 3:
                        message.endpoint = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretCreateRequest {
            return SwiftSecretCreateRequest.deserialize(bytes);
        }
    }
    export class SwiftSecretUpdateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[2, 3]];
        constructor(data?: any[] | ({
            secretId?: string;
            endpoint?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        } & (({
            v2AuthSecret?: SwiftV2AuthSecret;
            v3AuthSecret?: never;
        } | {
            v2AuthSecret?: never;
            v3AuthSecret?: SwiftV3AuthSecret;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("v2AuthSecret" in data && data.v2AuthSecret != undefined) {
                    this.v2AuthSecret = data.v2AuthSecret;
                }
                if ("v3AuthSecret" in data && data.v3AuthSecret != undefined) {
                    this.v3AuthSecret = data.v3AuthSecret;
                }
                if ("endpoint" in data && data.endpoint != undefined) {
                    this.endpoint = data.endpoint;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get v2AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV2AuthSecret, 2) as SwiftV2AuthSecret;
        }
        set v2AuthSecret(value: SwiftV2AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_v2AuthSecret() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get v3AuthSecret() {
            return pb_1.Message.getWrapperField(this, SwiftV3AuthSecret, 3) as SwiftV3AuthSecret;
        }
        set v3AuthSecret(value: SwiftV3AuthSecret) {
            pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
        }
        get has_v3AuthSecret() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get endpoint() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set endpoint(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 5) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get secret() {
            const cases: {
                [index: number]: "none" | "v2AuthSecret" | "v3AuthSecret";
            } = {
                0: "none",
                2: "v2AuthSecret",
                3: "v3AuthSecret"
            };
            return cases[pb_1.Message.computeOneofCase(this, [2, 3])];
        }
        static fromObject(data: {
            secretId?: string;
            v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
            v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
            endpoint?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SwiftSecretUpdateRequest {
            const message = new SwiftSecretUpdateRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.v2AuthSecret != null) {
                message.v2AuthSecret = SwiftV2AuthSecret.fromObject(data.v2AuthSecret);
            }
            if (data.v3AuthSecret != null) {
                message.v3AuthSecret = SwiftV3AuthSecret.fromObject(data.v3AuthSecret);
            }
            if (data.endpoint != null) {
                message.endpoint = data.endpoint;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                v2AuthSecret?: ReturnType<typeof SwiftV2AuthSecret.prototype.toObject>;
                v3AuthSecret?: ReturnType<typeof SwiftV3AuthSecret.prototype.toObject>;
                endpoint?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.v2AuthSecret != null) {
                data.v2AuthSecret = this.v2AuthSecret.toObject();
            }
            if (this.v3AuthSecret != null) {
                data.v3AuthSecret = this.v3AuthSecret.toObject();
            }
            if (this.endpoint != null) {
                data.endpoint = this.endpoint;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_v2AuthSecret)
                writer.writeMessage(2, this.v2AuthSecret, () => this.v2AuthSecret.serialize(writer));
            if (this.has_v3AuthSecret)
                writer.writeMessage(3, this.v3AuthSecret, () => this.v3AuthSecret.serialize(writer));
            if (this.endpoint.length)
                writer.writeString(4, this.endpoint);
            if (this.has_authzToken)
                writer.writeMessage(5, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretUpdateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretUpdateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.v2AuthSecret, () => message.v2AuthSecret = SwiftV2AuthSecret.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.v3AuthSecret, () => message.v3AuthSecret = SwiftV3AuthSecret.deserialize(reader));
                        break;
                    case 4:
                        message.endpoint = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretUpdateRequest {
            return SwiftSecretUpdateRequest.deserialize(bytes);
        }
    }
    export class SwiftSecretUpdateResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            secretId?: string;
        }): SwiftSecretUpdateResponse {
            const message = new SwiftSecretUpdateResponse({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretUpdateResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretUpdateResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretUpdateResponse {
            return SwiftSecretUpdateResponse.deserialize(bytes);
        }
    }
    export class SwiftSecretDeleteRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secretId?: string;
            authzToken?: dependency_1.org.apache.airavata.mft.common.AuthToken;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secretId" in data && data.secretId != undefined) {
                    this.secretId = data.secretId;
                }
                if ("authzToken" in data && data.authzToken != undefined) {
                    this.authzToken = data.authzToken;
                }
            }
        }
        get secretId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set secretId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get authzToken() {
            return pb_1.Message.getWrapperField(this, dependency_1.org.apache.airavata.mft.common.AuthToken, 2) as dependency_1.org.apache.airavata.mft.common.AuthToken;
        }
        set authzToken(value: dependency_1.org.apache.airavata.mft.common.AuthToken) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_authzToken() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            secretId?: string;
            authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
        }): SwiftSecretDeleteRequest {
            const message = new SwiftSecretDeleteRequest({});
            if (data.secretId != null) {
                message.secretId = data.secretId;
            }
            if (data.authzToken != null) {
                message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.fromObject(data.authzToken);
            }
            return message;
        }
        toObject() {
            const data: {
                secretId?: string;
                authzToken?: ReturnType<typeof dependency_1.org.apache.airavata.mft.common.AuthToken.prototype.toObject>;
            } = {};
            if (this.secretId != null) {
                data.secretId = this.secretId;
            }
            if (this.authzToken != null) {
                data.authzToken = this.authzToken.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secretId.length)
                writer.writeString(1, this.secretId);
            if (this.has_authzToken)
                writer.writeMessage(2, this.authzToken, () => this.authzToken.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretDeleteRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretDeleteRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secretId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.authzToken, () => message.authzToken = dependency_1.org.apache.airavata.mft.common.AuthToken.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretDeleteRequest {
            return SwiftSecretDeleteRequest.deserialize(bytes);
        }
    }
    export class SwiftSecretDeleteResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set status(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            status?: boolean;
        }): SwiftSecretDeleteResponse {
            const message = new SwiftSecretDeleteResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: boolean;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != false)
                writer.writeBool(1, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SwiftSecretDeleteResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SwiftSecretDeleteResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SwiftSecretDeleteResponse {
            return SwiftSecretDeleteResponse.deserialize(bytes);
        }
    }
}
